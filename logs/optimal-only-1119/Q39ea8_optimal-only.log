# parsed arguments: Namespace(benchmark='Q39ea8', dsl='meta_visqa', skeletons='visqa_normal', strategy='TaPas_C', fallback='auto', timeout=300, mode='optimal-only', expected_only=False)
# loading benchmark...
# table keywords: {'1363080000', 'prt', 'country', 'can', 'ita', '4870750000', '2301450000', '7020280000', '18014480000', '2329560000', 'dnk', '799520000', 'bel', 'donation', 'gbr', 'usa', '1372000000', 'deu', 'nor', 'aus', 'aut', '5404860000', 'jpn', '4769530000', '1890450000', 'blue', '776670000', 'che', 'color', '672630000', '1802720000', 'swe', '405800000', '372190000', 'nld', '458880000', '456310000', 'fin', '1349570000', '2289930000', 'fra', 'irl', 'esp', 'kor'}
# input type: [dtype('int64'), dtype('O'), dtype('O')]
# input is:
       donation Country color
0   18014480000     USA  blue
1    7020280000     JPN  blue
2    5404860000     FRA  blue
3    4870750000     DEU  blue
4    4769530000     GBR  blue
5    2329560000     CAN  blue
6    2301450000     AUS  blue
7    2289930000     ESP  blue
8    1890450000     NLD  blue
9    1802720000     NOR  blue
10   1372000000     BEL  blue
11   1363080000     SWE  blue
12   1349570000     DNK  blue
13    799520000     KOR  blue
14    776670000     CHE  blue
15    672630000     ITA  blue
16    458880000     IRL  blue
17    456310000     FIN  blue
18    405800000     AUT  blue
19    372190000     PRT  blue
# query is: How many countries have donated more than 5,000,000,000 but less than 10,000,000,000?
# expected output type:[dtype('int64')]
# expected output is:
   ANSWER
0       2
# inferred DSL terminals:
  # ConstVal: ['Country@Str', '<NULL>']
     # cmap: [('countries', 'Country')]
  # AggrFunc: ['count', '<NULL>']
     # amap: [('how many', 'count')]
  # NumFunc: ['-', '<NULL>']
     # nmap: [('more', '-')]
  # BoolFunc: ['==', '>', '<', '<=', '>=', '<NULL>']
     # bmap: [(None, '=='), ('more', '>='), ('more', '>'), ('less', '<'), ('less', '<=')]
  # IndFunc: ['<NULL>']
     # imap: []
# ====> fallback strategy (comparison) is triggered
  # [debug] high_values: []
  # [debug] high_values (no dup.): []
  # [debug] filtered low_values (no dup.): []
# loading skeleton list...

# ========== candidate program report ========== #
# (t=0.00) i=0, candidate=[{'ANSWER': 1}]
  # found 0 program(s)
# (t=0.50) i=1, candidate=[{'ANSWER': 2}]
  # found 0 program(s)
# (t=0.99) i=2, candidate=[{'ANSWER': 3}]
  # found 0 program(s)
# ====> fallback strategy (retrieval) is triggered because no explanation is found so far
# ====> retrieval_values: [1349570000, 1363080000, 1372000000, 18014480000, 1802720000, 1890450000, 2289930000, 2301450000, 2329560000, 372190000, 405800000, 456310000, 458880000, 4769530000, 4870750000, 5404860000, 672630000, 7020280000, 776670000, 799520000, 'AUS', 'AUT', 'BEL', 'CAN', 'CHE', 'Country', 'DEU', 'DNK', 'ESP', 'FIN', 'FRA', 'GBR', 'IRL', 'ITA', 'JPN', 'KOR', 'NLD', 'NOR', 'PRT', 'SWE', 'USA', 'blue', 'color', 'donation']
# (t=1.48) fallback i=0, candidate=[{'ANSWER': 1349570000}]
  # found 0 program(s)
# (t=1.97) fallback i=1, candidate=[{'ANSWER': 1363080000}]
  # found 0 program(s)
# (t=2.47) fallback i=2, candidate=[{'ANSWER': 1372000000}]
  # found 0 program(s)
# (t=2.96) fallback i=3, candidate=[{'ANSWER': 18014480000}]
  # found 0 program(s)
# (t=3.45) fallback i=4, candidate=[{'ANSWER': 1802720000}]
  # found 0 program(s)
# (t=3.94) fallback i=5, candidate=[{'ANSWER': 1890450000}]
  # found 0 program(s)
# (t=4.43) fallback i=6, candidate=[{'ANSWER': 2289930000}]
  # found 0 program(s)
# (t=4.92) fallback i=7, candidate=[{'ANSWER': 2301450000}]
  # found 0 program(s)
# (t=5.42) fallback i=8, candidate=[{'ANSWER': 2329560000}]
  # found 0 program(s)
# (t=5.91) fallback i=9, candidate=[{'ANSWER': 372190000}]
  # found 0 program(s)
# (t=6.40) fallback i=10, candidate=[{'ANSWER': 405800000}]
  # found 0 program(s)
# (t=6.89) fallback i=11, candidate=[{'ANSWER': 456310000}]
  # found 0 program(s)
# (t=7.39) fallback i=12, candidate=[{'ANSWER': 458880000}]
  # found 0 program(s)
# (t=7.90) fallback i=13, candidate=[{'ANSWER': 4769530000}]
  # found 0 program(s)
# (t=8.39) fallback i=14, candidate=[{'ANSWER': 4870750000}]
  # found 0 program(s)
# (t=8.89) fallback i=15, candidate=[{'ANSWER': 5404860000}]
  # found 0 program(s)
# (t=9.38) fallback i=16, candidate=[{'ANSWER': 672630000}]
  # found 0 program(s)
# (t=9.88) fallback i=17, candidate=[{'ANSWER': 7020280000}]
  # found 0 program(s)
# (t=10.37) fallback i=18, candidate=[{'ANSWER': 776670000}]
  # found 0 program(s)
# (t=10.86) fallback i=19, candidate=[{'ANSWER': 799520000}]
  # found 0 program(s)
# (t=11.36) fallback i=20, candidate=[{'ANSWER': 'AUS'}]
  # found 0 program(s)
# (t=11.86) fallback i=21, candidate=[{'ANSWER': 'AUT'}]
  # found 0 program(s)
# (t=12.35) fallback i=22, candidate=[{'ANSWER': 'BEL'}]
  # found 0 program(s)
# (t=13.13) fallback i=23, candidate=[{'ANSWER': 'CAN'}]
  # found 0 program(s)
# (t=13.62) fallback i=24, candidate=[{'ANSWER': 'CHE'}]
  # found 0 program(s)
# (t=14.12) fallback i=25, candidate=[{'ANSWER': 'Country'}]
  # found 0 program(s)
# (t=14.61) fallback i=26, candidate=[{'ANSWER': 'DEU'}]
  # found 0 program(s)
# (t=15.11) fallback i=27, candidate=[{'ANSWER': 'DNK'}]
  # found 0 program(s)
# (t=15.60) fallback i=28, candidate=[{'ANSWER': 'ESP'}]
  # found 0 program(s)
# (t=16.10) fallback i=29, candidate=[{'ANSWER': 'FIN'}]
  # found 0 program(s)
# (t=16.59) fallback i=30, candidate=[{'ANSWER': 'FRA'}]
  # found 0 program(s)
# (t=17.09) fallback i=31, candidate=[{'ANSWER': 'GBR'}]
  # found 0 program(s)
# (t=17.57) fallback i=32, candidate=[{'ANSWER': 'IRL'}]
  # found 0 program(s)
# (t=18.07) fallback i=33, candidate=[{'ANSWER': 'ITA'}]
  # found 0 program(s)
# (t=18.58) fallback i=34, candidate=[{'ANSWER': 'JPN'}]
  # found 0 program(s)
# (t=19.08) fallback i=35, candidate=[{'ANSWER': 'KOR'}]
  # found 0 program(s)
# (t=19.58) fallback i=36, candidate=[{'ANSWER': 'NLD'}]
  # found 0 program(s)
# (t=20.08) fallback i=37, candidate=[{'ANSWER': 'NOR'}]
  # found 0 program(s)
# (t=20.59) fallback i=38, candidate=[{'ANSWER': 'PRT'}]
  # found 0 program(s)
# (t=21.09) fallback i=39, candidate=[{'ANSWER': 'SWE'}]
  # found 0 program(s)
# (t=21.59) fallback i=40, candidate=[{'ANSWER': 'USA'}]
  # found 0 program(s)
# (t=22.10) fallback i=41, candidate=[{'ANSWER': 'blue'}]
  # found 0 program(s)
# (t=22.60) fallback i=42, candidate=[{'ANSWER': 'color'}]
  # found 0 program(s)
# (t=23.10) fallback i=43, candidate=[{'ANSWER': 'donation'}]
  # found 0 program(s)
# ====> fallback strategy (original) is triggered
# ====> use the original TaPas output as answer, which is: [3]

# ========== review report ========== #
