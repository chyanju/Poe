# parsed arguments: Namespace(benchmark='Qf6c0d', dsl='meta_visqa', skeletons='visqa_normal', strategy='TaPas_C', fallback='auto', timeout=300, mode='optimal-only', expected_only=False)
# loading benchmark...
# table keywords: {'engineering', 'chemistry', 'design', '42', 'env', '61', 'nat', 'business', 'programs', 'color', 'ls', 'gray', '91', '55', 'yellow', 'major', 'green', 'sciences', 'arts', 'blue', '53', '60', 'bio', 'purple', 'math', 'social', '52', 'resources', 'orange', 'phys', 'brown', '62', 'undergrad', 'humanities', 'sci', '67', '84', 'percent', 'red'}
# input type: [dtype('O'), dtype('int64'), dtype('O')]
# input is:
              major  percent   color
0       LS Programs       42  yellow
1      Bio Sciences       52    blue
2      LS Undergrad       53  yellow
3     Math Phys Sci       55  orange
4     Nat Resources       60   brown
5   Arts Humanities       61    gray
6   Social Sciences       61   brown
7         Chemistry       62     red
8        Env Design       67   green
9       Engineering       84  orange
10         Business       91  purple
# query is: Which majors have an equal percentage of students who graduated?
# expected output type:[dtype('O')]
# expected output is:
            ANSWER
0   Art Humanities
1  Social Sciences
# inferred DSL terminals:
  # ConstVal: ['percent@Str', 'major@Str', '<NULL>']
     # cmap: [('majors', 'major'), ('percentage', 'percent')]
  # AggrFunc: ['<NULL>']
     # amap: []
  # NumFunc: ['<NULL>']
     # nmap: []
  # BoolFunc: ['==', '<NULL>']
     # bmap: [(None, '=='), ('equal', '==')]
  # IndFunc: ['<NULL>']
     # imap: []
# loading skeleton list...

# ========== candidate program report ========== #
# (t=0.00) i=0, candidate=[{'ANSWER': 'LS Programs'}]
  # found 0 program(s)
# (t=1.05) i=1, candidate=[{'ANSWER': 'Engineering'}]
  # found 0 program(s)
# (t=2.08) i=2, candidate=[{'ANSWER': 'Bio Sciences'}]
  # found 0 program(s)
# (t=3.11) i=3, candidate=[{'ANSWER': 'LS Undergrad'}]
  # found 0 program(s)
# (t=4.14) i=4, candidate=[{'ANSWER': 'Arts Humanities'}]
  # found 0 program(s)
# (t=5.17) i=5, candidate=[{'ANSWER': 'Business'}]
  # found 0 program(s)
# (t=6.20) i=6, candidate=[{'ANSWER': 'Math Phys Sci'}]
  # found 0 program(s)
# (t=7.23) i=7, candidate=[{'ANSWER': 'Social Sciences'}]
  # found 0 program(s)
# (t=8.28) i=8, candidate=[{'ANSWER': 'Env Design'}]
  # found 0 program(s)
# (t=9.31) i=9, candidate=[{'ANSWER': 'Nat Resources'}]
  # found 0 program(s)
# (t=10.36) i=10, candidate=[{'ANSWER': 'Chemistry'}]
  # found 0 program(s)
# ====> fallback strategy (retrieval) is triggered because no explanation is found so far
# ====> retrieval_values: [42, 52, 53, 55, 60, 61, 62, 67, 84, 91, 'Arts Humanities', 'Bio Sciences', 'Business', 'Chemistry', 'Engineering', 'Env Design', 'LS Programs', 'LS Undergrad', 'Math Phys Sci', 'Nat Resources', 'Social Sciences', 'blue', 'brown', 'color', 'gray', 'green', 'major', 'orange', 'percent', 'purple', 'red', 'yellow']
# (t=11.71) fallback i=0, candidate=[{'ANSWER': 42}]
  # found 0 program(s)
# (t=12.75) fallback i=1, candidate=[{'ANSWER': 52}]
  # found 0 program(s)
# (t=13.79) fallback i=2, candidate=[{'ANSWER': 53}]
  # found 0 program(s)
# (t=14.83) fallback i=3, candidate=[{'ANSWER': 55}]
  # found 0 program(s)
# (t=15.89) fallback i=4, candidate=[{'ANSWER': 60}]
  # found 0 program(s)
# (t=16.94) fallback i=5, candidate=[{'ANSWER': 61}]
  # found 0 program(s)
# (t=18.00) fallback i=6, candidate=[{'ANSWER': 62}]
  # found 0 program(s)
# (t=19.05) fallback i=7, candidate=[{'ANSWER': 67}]
  # found 0 program(s)
# (t=20.10) fallback i=8, candidate=[{'ANSWER': 84}]
  # found 0 program(s)
# (t=21.15) fallback i=9, candidate=[{'ANSWER': 91}]
  # found 0 program(s)
# (t=22.19) fallback i=10, candidate=[{'ANSWER': 'Arts Humanities'}]
  # found 0 program(s)
# (t=23.23) fallback i=11, candidate=[{'ANSWER': 'Bio Sciences'}]
  # found 0 program(s)
# (t=24.26) fallback i=12, candidate=[{'ANSWER': 'Business'}]
  # found 0 program(s)
# (t=25.63) fallback i=13, candidate=[{'ANSWER': 'Chemistry'}]
  # found 0 program(s)
# (t=26.65) fallback i=14, candidate=[{'ANSWER': 'Engineering'}]
  # found 0 program(s)
# (t=27.68) fallback i=15, candidate=[{'ANSWER': 'Env Design'}]
  # found 0 program(s)
# (t=28.72) fallback i=16, candidate=[{'ANSWER': 'LS Programs'}]
  # found 0 program(s)
# (t=29.75) fallback i=17, candidate=[{'ANSWER': 'LS Undergrad'}]
  # found 0 program(s)
# (t=30.80) fallback i=18, candidate=[{'ANSWER': 'Math Phys Sci'}]
  # found 0 program(s)
# (t=31.85) fallback i=19, candidate=[{'ANSWER': 'Nat Resources'}]
  # found 0 program(s)
# (t=32.89) fallback i=20, candidate=[{'ANSWER': 'Social Sciences'}]
  # found 0 program(s)
# (t=33.93) fallback i=21, candidate=[{'ANSWER': 'blue'}]
  # found 0 program(s)
# (t=34.97) fallback i=22, candidate=[{'ANSWER': 'brown'}]
  # found 0 program(s)
# (t=36.00) fallback i=23, candidate=[{'ANSWER': 'color'}]
  # found 0 program(s)
# (t=37.04) fallback i=24, candidate=[{'ANSWER': 'gray'}]
  # found 0 program(s)
# (t=38.08) fallback i=25, candidate=[{'ANSWER': 'green'}]
  # found 0 program(s)
# (t=39.13) fallback i=26, candidate=[{'ANSWER': 'major'}]
  # found 0 program(s)
# (t=40.51) fallback i=27, candidate=[{'ANSWER': 'orange'}]
  # found 0 program(s)
# (t=41.54) fallback i=28, candidate=[{'ANSWER': 'percent'}]
  # found 0 program(s)
# (t=42.60) fallback i=29, candidate=[{'ANSWER': 'purple'}]
  # found 0 program(s)
# (t=43.64) fallback i=30, candidate=[{'ANSWER': 'red'}]
  # found 0 program(s)
# (t=44.69) fallback i=31, candidate=[{'ANSWER': 'yellow'}]
  # found 0 program(s)
# ====> fallback strategy (original) is triggered
# ====> use the original TaPas output as answer, which is: ['LS Programs']

# ========== review report ========== #
