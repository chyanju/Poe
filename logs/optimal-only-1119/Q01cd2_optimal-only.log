# parsed arguments: Namespace(benchmark='Q01cd2', dsl='meta_visqa', skeletons='visqa_normal', strategy='TaPas_C', fallback='auto', timeout=300, mode='optimal-only', expected_only=False)
# loading benchmark...
# table keywords: {'192.79', '574.29', '102.35', '10.54', '34.0', '2009', '359.36', '28.13', '28.8', '76.25', '378.53', '536.12', '32.09', '75.12', '105.4', '11.84', '23.28', '113.53', '7.44', '173.95', '118.81', '41.67', '43.01', '125.14', '11.28', '22.5', '92.91', '14.3', '45.3', '11.65', '10.85', '80.81', '85.35', '30.83', '20.87', '20.82', '53.61', '29.7', '27.95', '52.62', '19.52', '79.65', '39.86', '372.14', '43.22', '27.25', '83.66', '85.76', '125.83', '8.94', '75.51', '8.03', '89.44', '24.52', '16.69', 'green', '22.47', '100.82', '484.81', '75.04', '21.8', '80.19', '16.63', '78.54', '79.13', '104.85', '42.65', '21.75', '14.94', '90.25', '123.74', 'jun', '31.13', '14.19', '14.15', '7.51', '10.95', '21.03', '39.14', '81.04', '23.82', '707.0', '348.06', '2003', '81.08', '63.86', '85.73', '75.07', '70.77', '25.78', '57.24', '12.89', '39.46', '39.76', '50.4', '37.67', '7.16', '82.98', '25.71', '17.25', '338.53', '33.53', '48.5', '84.61', '44.29', '10.45', '17.99', '84.12', '7.75', '74.28', '72.97', '15.78', '101.54', '421.59', '167.44', '583.0', 'feb', '23.34', '57.59', '48.31', '14.1', '81.62', '62.72', '84.84', '143.5', '529.94', '26.19', '116.23', '79.16', '82.82', '94.15', '125.02', '2004', '105.12', '30.34', '24.29', '24.13', '36.06', '21.19', '84.66', '11.62', '26.47', '75.89', '23.64', '40.86', '27.5', '10.69', '26.2', '89.98', '17.31', '71.57', '417.23', '70.18', '9.12', '67.82', '131.76', '80.91', '64.56', '85.05', '8.98', '567.27', '23.35', '109.64', '25.49', '67.85', '100.76', '12.49', '22.46', '58.82', '188.5', '72.76', '71.89', '98.33', '189.95', '362.62', '71.13', '76.98', '38.68', '78.17', '294.15', '6.98', '51.28', '118.55', '77.99', '22.69', '28.4', '23.83', '21.45', '92.64', '76.35', '691.48', '28.3', '39.79', '182.22', '77.26', '53.01', 'jan', '99.95', '585.8', '21.1', '38.45', '287.76', '22.93', '471.18', '86.63', '67.0', '22.24', '16.27', '15.93', '192.06', '337.99', '91.9', '401.9', 'date', 'orange', '87.06', '23.42', '27.34', '163.39', '110.87', '185.35', '10.23', '38.44', '7.76', '68.49', '21.65', '495.85', '11.32', '93.79', 'dec', '26.14', '48.43', '97.58', '24.6', '125.41', '41.64', '41.5', 'symbol', '560.19', '89.31', '28.67', 'mar', 'teal', '70.58', '9.98', '26.03', '16.17', '36.53', '135.91', '10.19', '28.66', '473.75', '45.15', '68.93', '169.53', '53.97', '23.38', '77.47', '19.84', '129.6', '10.36', '11.96', '77.17', '134.52', '88.18', '64.79', '34.27', '23.15', '20.93', '24.0', '81.19', '55.19', '24.43', '72.7', '28.69', '395.97', '501.5', '14.03', '121.19', '80.52', '526.8', '36.81', '5.97', '34.61', '91.06', '390.0', '38.14', '92.11', '69.14', '43.6', '292.96', '26.35', '7.25', '142.43', '90.24', '29.07', '32.54', '16.25', '25.92', '10.65', '25.45', '30.12', '26.95', '68.87', '68.52', '82.84', '463.29', '449.45', '11.03', '158.95', '35.21', '24.84', '2000', '419.33', '128.82', '18.91', '65.31', '79.91', '7.18', '316.46', '25.35', '23.18', '37.44', 'nov', '40.34', '9.78', '86.39', '9.53', '10.81', '72.15', '122.04', '8.86', '78.63', '135.36', '48.46', '44.86', '68.41', '54.43', 'apr', '96.31', '12.74', '8.25', '286.0', '26.07', '81.59', '25.36', '80.48', 'aapl', '36.35', '432.66', '101.19', '46.32', '39.81', '12.88', '2001', '18.89', '28.02', '118.16', '88.7', '114.6', '400.52', '26.12', '125.55', '104.5', '36.31', '17.65', '73.44', '564.3', '7.38', '33.09', '54.4', '32.2', '27.66', '86.95', '121.85', '113.66', '44.82', 'ibm', '19.34', '28.37', 'may', '28.04', '88.5', '510.0', '100.74', '417.94', '91.16', '371.82', '307.65', '109.36', '36.32', '118.4', '57.27', '14.45', '2006', '27.56', '461.67', '26.93', '693.0', '100.52', '106.11', '95.09', '71.3', '82.15', '23.02', '29.11', '190.64', '116.34', '71.22', '29.27', '125.79', '12.36', '35.89', 'sep', '471.38', '28.14', '87.15', '89.46', '443.05', '111.0', '7.07', '19.38', '204.62', '23.73', '77.53', '43.28', '112.6', '21.26', '21.0', '96.98', '24.11', '93.36', '21.53', '46.89', '153.47', '20.46', '35.51', '81.96', '223.02', '9.4', '199.91', '522.7', 'jul', '20.71', '100.9', '13.52', '119.54', '9.27', '168.21', '23.65', '18.23', '89.15', 'oct', '25.68', '32.12', '198.08', '26.36', '61.33', '21.77', '526.42', '458.16', '74.7', '27.48', '39.68', '19.31', '32.36', '90.56', '26.63', '10.82', '76.47', '35.03', '90.32', '24.75', '75.42', '404.91', '26.89', '11.31', '102.37', '22.51', '19.97', '73.33', '70.39', '619.98', '01,', '97.54', '188.75', '497.91', '93.15', '210.73', 'amzn', '118.62', '91.66', '20.09', '23.8', '83.08', '11.44', '75.09', 'blue', '180.51', '76.73', '515.25', '23.21', '130.32', '33.95', '2002', '2007', '24.69', '100.25', '28.05', '476.39', '21.57', '75.82', '277.27', '2010', '22.76', '47.15', 'price', '77.7', '220.0', '135.81', '22.25', '7.11', '64.47', '15.56', '34.13', '25.41', '21.56', '103.7', '181.98', '25.04', '85.78', '31.01', '8.78', '15.81', 'msft', '22.01', '25.94', '35.18', '117.0', '23.46', '36.62', '94.87', '19.36', '127.16', '19.76', '38.92', '30.47', '2008', 'color', '88.82', '12.14', '21.85', 'red', '386.6', '38.09', '23.44', '20.59', '76.34', '7.63', '187.99', '17.79', '77.05', '71.76', '92.67', '440.47', '99.8', '2005', '59.77', '107.59', '90.13', '111.54', '460.48', '103.01', 'aug', '42.7', '19.66', '24.53', 'goog', '102.75', '26.96', '414.86', '84.41', '138.48', '195.62', '27.21', '67.96', '101.29'}
# input type: [dtype('O'), dtype('O'), dtype('float64'), dtype('O')]
# input is:
    symbol          date   price  color
0     MSFT  Jan 01, 2000   39.81  green
1     MSFT  Feb 01, 2000   36.35  green
2     MSFT  Mar 01, 2000   43.22  green
3     MSFT  Apr 01, 2000   28.37  green
4     MSFT  May 01, 2000   25.45  green
..     ...           ...     ...    ...
555   AAPL  Nov 01, 2009  199.91   blue
556   AAPL  Dec 01, 2009  210.73   blue
557   AAPL  Jan 01, 2010  192.06   blue
558   AAPL  Feb 01, 2010  204.62   blue
559   AAPL  Mar 01, 2010  223.02   blue

[560 rows x 4 columns]
# query is: when apple price starts to be larger than IBM?	
# expected output type:[dtype('int64')]
# expected output is:
   ANSWER
0    2006
# inferred DSL terminals:
  # ConstVal: ['price@Str', 'IBM@Str', '<NULL>']
     # cmap: [('price', 'price'), ('ibm', 'IBM')]
  # AggrFunc: ['<NULL>']
     # amap: []
  # NumFunc: ['-', '<NULL>']
     # nmap: [('larger', '-')]
  # BoolFunc: ['>', '>=', '==', '<NULL>']
     # bmap: [(None, '=='), ('larger', '>='), ('larger', '>')]
  # IndFunc: ['<NULL>']
     # imap: []
# ====> fallback strategy (comparison) is triggered
  # [debug] high_values: [(77.31, 4), (74.15, 4), (72.78, 4), (72.53999999999999, 4), (72.13, 4), (70.72999999999999, 4), (68.84, 4), (66.53, 4), (66.46, 4), (65.61000000000001, 4)]
  # [debug] high_values (no dup.): [(77.31, 4), (74.15, 4), (72.78, 4), (72.53999999999999, 4), (72.13, 4), (70.72999999999999, 4), (68.84, 4), (66.53, 4), (66.46, 4), (65.61000000000001, 4)]
  # [debug] filtered low_values (no dup.): [(653.99, 2), (643.14, 2), (641.69, 2), (639.99, 2), (638.48, 2), (638.47, 2), (638.0699999999999, 2), (636.8199999999999, 2), (636.42, 2), (636.23, 2)]
  # [debug] fallback (comparison) answers are added
# loading skeleton list...

# ========== candidate program report ========== #
# (t=0.00) i=0, candidate=[{'ANSWER': 77.31}]
  # found 0 program(s)
# (t=2.64) i=1, candidate=[{'ANSWER': 74.15}]
  # found 0 program(s)
# (t=5.25) i=2, candidate=[{'ANSWER': 72.78}]
  # found 0 program(s)
# (t=7.87) i=3, candidate=[{'ANSWER': 72.53999999999999}]
  # found 0 program(s)
# (t=10.78) i=4, candidate=[{'ANSWER': 72.13}]
  # found 0 program(s)
# (t=13.39) i=5, candidate=[{'ANSWER': 70.72999999999999}]
  # found 0 program(s)
# (t=16.01) i=6, candidate=[{'ANSWER': 68.84}]
  # found 0 program(s)
# (t=18.63) i=7, candidate=[{'ANSWER': 66.53}]
  # found 0 program(s)
# (t=21.25) i=8, candidate=[{'ANSWER': 66.46}]
  # found 0 program(s)
# (t=24.22) i=9, candidate=[{'ANSWER': 65.61000000000001}]
  # found 0 program(s)
# (t=26.85) i=10, candidate=[{'ANSWER': 653.99}]
  # found 0 program(s)
# (t=29.45) i=11, candidate=[{'ANSWER': 643.14}]
  # found 0 program(s)
# (t=32.07) i=12, candidate=[{'ANSWER': 641.69}]
  # found 0 program(s)
# (t=34.69) i=13, candidate=[{'ANSWER': 639.99}]
  # found 0 program(s)
# (t=37.32) i=14, candidate=[{'ANSWER': 638.48}]
  # found 0 program(s)
# (t=40.32) i=15, candidate=[{'ANSWER': 638.47}]
  # found 0 program(s)
# (t=42.94) i=16, candidate=[{'ANSWER': 638.0699999999999}]
  # found 0 program(s)
# (t=45.55) i=17, candidate=[{'ANSWER': 636.8199999999999}]
  # found 0 program(s)
# (t=48.19) i=18, candidate=[{'ANSWER': 636.42}]
  # found 0 program(s)
# (t=50.81) i=19, candidate=[{'ANSWER': 636.23}]
  # found 0 program(s)
# ====> fallback strategy (retrieval) is triggered because no explanation is found so far
# ====> retrieval_values: [10.19, 10.23, 10.36, 10.45, 10.54, 10.65, 10.69, 10.81, 10.82, 10.85, 10.95, 100.25, 100.52, 100.74, 100.76, 100.82, 100.9, 101.19, 101.29, 101.54, 102.35, 102.37, 102.75, 103.01, 103.7, 104.5, 104.85, 105.12, 105.4, 106.11, 107.59, 109.36, 109.64, 11.03, 11.28, 11.31, 11.32, 11.44, 11.62, 11.65, 11.84, 11.96, 110.87, 111.0, 111.54, 112.6, 113.53, 113.66, 114.6, 116.23, 116.34, 117.0, 118.16, 118.4, 118.55, 118.62, 118.81, 119.54, 12.14, 12.36, 12.49, 12.74, 12.88, 12.89, 121.19, 121.85, 122.04, 123.74, 125.02, 125.14, 125.41, 125.55, 125.79, 125.83, 127.16, 128.82, 129.6, 13.52, 130.32, 131.76, 134.52, 135.36, 135.81, 135.91, 138.48, 14.03, 14.1, 14.15, 14.19, 14.3, 14.45, 14.94, 142.43, 143.5, 15.56, 15.78, 15.81, 15.93, 153.47, 158.95, 16.17, 16.25, 16.27, 16.63, 16.69, 163.39, 167.44, 168.21, 169.53, 17.25, 17.31, 17.65, 17.79, 17.99, 173.95, 18.23, 18.89, 18.91, 180.51, 181.98, 182.22, 185.35, 187.99, 188.5, 188.75, 189.95, 19.31, 19.34, 19.36, 19.38, 19.52, 19.66, 19.76, 19.84, 19.97, 190.64, 192.06, 192.79, 195.62, 198.08, 199.91, 20.09, 20.46, 20.59, 20.71, 20.82, 20.87, 20.93, 204.62, 21.0, 21.03, 21.1, 21.19, 21.26, 21.45, 21.53, 21.56, 21.57, 21.65, 21.75, 21.77, 21.8, 21.85, 210.73, 22.01, 22.24, 22.25, 22.46, 22.47, 22.5, 22.51, 22.69, 22.76, 22.93, 220.0, 223.02, 23.02, 23.15, 23.18, 23.21, 23.28, 23.34, 23.35, 23.38, 23.42, 23.44, 23.46, 23.64, 23.65, 23.73, 23.8, 23.82, 23.83, 24.0, 24.11, 24.13, 24.29, 24.43, 24.52, 24.53, 24.6, 24.69, 24.75, 24.84, 25.04, 25.35, 25.36, 25.41, 25.45, 25.49, 25.68, 25.71, 25.78, 25.92, 25.94, 26.03, 26.07, 26.12, 26.14, 26.19, 26.2, 26.35, 26.36, 26.47, 26.63, 26.89, 26.93, 26.95, 26.96, 27.21, 27.25, 27.34, 27.48, 27.5, 27.56, 27.66, 27.95, 277.27, 28.02, 28.04, 28.05, 28.13, 28.14, 28.3, 28.37, 28.4, 28.66, 28.67, 28.69, 28.8, 286.0, 287.76, 29.07, 29.11, 29.27, 29.7, 292.96, 294.15, 30.12, 30.34, 30.47, 30.83, 307.65, 31.01, 31.13, 316.46, 32.09, 32.12, 32.2, 32.36, 32.54, 33.09, 33.53, 33.95, 337.99, 338.53, 34.0, 34.13, 34.27, 34.61, 348.06, 35.03, 35.18, 35.21, 35.51, 35.89, 359.36, 36.06, 36.31, 36.32, 36.35, 36.53, 36.62, 36.81, 362.62, 37.44, 37.67, 371.82, 372.14, 378.53, 38.09, 38.14, 38.44, 38.45, 38.68, 38.92, 386.6, 39.14, 39.46, 39.68, 39.76, 39.79, 39.81, 39.86, 390.0, 395.97, 40.34, 40.86, 400.52, 401.9, 404.91, 41.5, 41.64, 41.67, 414.86, 417.23, 417.94, 419.33, 42.65, 42.7, 421.59, 43.01, 43.22, 43.28, 43.6, 432.66, 44.29, 44.82, 44.86, 440.47, 443.05, 449.45, 45.15, 45.3, 458.16, 46.32, 46.89, 460.48, 461.67, 463.29, 47.15, 471.18, 471.38, 473.75, 476.39, 48.31, 48.43, 48.46, 48.5, 484.81, 495.85, 497.91, 5.97, 50.4, 501.5, 51.28, 510.0, 515.25, 52.62, 522.7, 526.42, 526.8, 529.94, 53.01, 53.61, 53.97, 536.12, 54.4, 54.43, 55.19, 560.19, 564.3, 567.27, 57.24, 57.27, 57.59, 574.29, 58.82, 583.0, 585.8, 59.77, 6.98, 61.33, 619.98, 62.72, 63.86, 64.47, 64.56, 64.79, 65.31, 67.0, 67.82, 67.85, 67.96, 68.41, 68.49, 68.52, 68.87, 68.93, 69.14, 691.48, 693.0, 7.07, 7.11, 7.16, 7.18, 7.25, 7.38, 7.44, 7.51, 7.63, 7.75, 7.76, 70.18, 70.39, 70.58, 70.77, 707.0, 71.13, 71.22, 71.3, 71.57, 71.76, 71.89, 72.15, 72.7, 72.76, 72.97, 73.33, 73.44, 74.28, 74.7, 75.04, 75.07, 75.09, 75.12, 75.42, 75.51, 75.82, 75.89, 76.25, 76.34, 76.35, 76.47, 76.73, 76.98, 77.05, 77.17, 77.26, 77.47, 77.53, 77.7, 77.99, 78.17, 78.54, 78.63, 79.13, 79.16, 79.65, 79.91, 8.03, 8.25, 8.78, 8.86, 8.94, 8.98, 80.19, 80.48, 80.52, 80.81, 80.91, 81.04, 81.08, 81.19, 81.59, 81.62, 81.96, 82.15, 82.82, 82.84, 82.98, 83.08, 83.66, 84.12, 84.41, 84.61, 84.66, 84.84, 85.05, 85.35, 85.73, 85.76, 85.78, 86.39, 86.63, 86.95, 87.06, 87.15, 88.18, 88.5, 88.7, 88.82, 89.15, 89.31, 89.44, 89.46, 89.98, 9.12, 9.27, 9.4, 9.53, 9.78, 9.98, 90.13, 90.24, 90.25, 90.32, 90.56, 91.06, 91.16, 91.66, 91.9, 92.11, 92.64, 92.67, 92.91, 93.15, 93.36, 93.79, 94.15, 94.87, 95.09, 96.31, 96.98, 97.54, 97.58, 98.33, 99.8, 99.95, 'AAPL', 'AMZN', 'Apr 01, 2000', 'Apr 01, 2001', 'Apr 01, 2002', 'Apr 01, 2003', 'Apr 01, 2004', 'Apr 01, 2005', 'Apr 01, 2006', 'Apr 01, 2007', 'Apr 01, 2008', 'Apr 01, 2009', 'Aug 01, 2000', 'Aug 01, 2001', 'Aug 01, 2002', 'Aug 01, 2003', 'Aug 01, 2004', 'Aug 01, 2005', 'Aug 01, 2006', 'Aug 01, 2007', 'Aug 01, 2008', 'Aug 01, 2009', 'Dec 01, 2000', 'Dec 01, 2001', 'Dec 01, 2002', 'Dec 01, 2003', 'Dec 01, 2004', 'Dec 01, 2005', 'Dec 01, 2006', 'Dec 01, 2007', 'Dec 01, 2008', 'Dec 01, 2009', 'Feb 01, 2000', 'Feb 01, 2001', 'Feb 01, 2002', 'Feb 01, 2003', 'Feb 01, 2004', 'Feb 01, 2005', 'Feb 01, 2006', 'Feb 01, 2007', 'Feb 01, 2008', 'Feb 01, 2009', 'Feb 01, 2010', 'GOOG', 'IBM', 'Jan 01, 2000', 'Jan 01, 2001', 'Jan 01, 2002', 'Jan 01, 2003', 'Jan 01, 2004', 'Jan 01, 2005', 'Jan 01, 2006', 'Jan 01, 2007', 'Jan 01, 2008', 'Jan 01, 2009', 'Jan 01, 2010', 'Jul 01, 2000', 'Jul 01, 2001', 'Jul 01, 2002', 'Jul 01, 2003', 'Jul 01, 2004', 'Jul 01, 2005', 'Jul 01, 2006', 'Jul 01, 2007', 'Jul 01, 2008', 'Jul 01, 2009', 'Jun 01, 2000', 'Jun 01, 2001', 'Jun 01, 2002', 'Jun 01, 2003', 'Jun 01, 2004', 'Jun 01, 2005', 'Jun 01, 2006', 'Jun 01, 2007', 'Jun 01, 2008', 'Jun 01, 2009', 'MSFT', 'Mar 01, 2000', 'Mar 01, 2001', 'Mar 01, 2002', 'Mar 01, 2003', 'Mar 01, 2004', 'Mar 01, 2005', 'Mar 01, 2006', 'Mar 01, 2007', 'Mar 01, 2008', 'Mar 01, 2009', 'Mar 01, 2010', 'May 01, 2000', 'May 01, 2001', 'May 01, 2002', 'May 01, 2003', 'May 01, 2004', 'May 01, 2005', 'May 01, 2006', 'May 01, 2007', 'May 01, 2008', 'May 01, 2009', 'Nov 01, 2000', 'Nov 01, 2001', 'Nov 01, 2002', 'Nov 01, 2003', 'Nov 01, 2004', 'Nov 01, 2005', 'Nov 01, 2006', 'Nov 01, 2007', 'Nov 01, 2008', 'Nov 01, 2009', 'Oct 01, 2000', 'Oct 01, 2001', 'Oct 01, 2002', 'Oct 01, 2003', 'Oct 01, 2004', 'Oct 01, 2005', 'Oct 01, 2006', 'Oct 01, 2007', 'Oct 01, 2008', 'Oct 01, 2009', 'Sep 01, 2000', 'Sep 01, 2001', 'Sep 01, 2002', 'Sep 01, 2003', 'Sep 01, 2004', 'Sep 01, 2005', 'Sep 01, 2006', 'Sep 01, 2007', 'Sep 01, 2008', 'Sep 01, 2009', 'blue', 'color', 'date', 'green', 'orange', 'price', 'red', 'symbol', 'teal']
# (t=53.75) fallback i=0, candidate=[{'ANSWER': 10.19}]
  # found 0 program(s)
# (t=56.38) fallback i=1, candidate=[{'ANSWER': 10.23}]
  # found 0 program(s)
# (t=58.98) fallback i=2, candidate=[{'ANSWER': 10.36}]
  # found 0 program(s)
# (t=61.61) fallback i=3, candidate=[{'ANSWER': 10.45}]
  # found 0 program(s)
# (t=64.25) fallback i=4, candidate=[{'ANSWER': 10.54}]
  # found 0 program(s)
# (t=67.24) fallback i=5, candidate=[{'ANSWER': 10.65}]
  # found 0 program(s)
# (t=69.88) fallback i=6, candidate=[{'ANSWER': 10.69}]
  # found 0 program(s)
# (t=72.50) fallback i=7, candidate=[{'ANSWER': 10.81}]
  # found 0 program(s)
# (t=75.12) fallback i=8, candidate=[{'ANSWER': 10.82}]
  # found 0 program(s)
# (t=77.73) fallback i=9, candidate=[{'ANSWER': 10.85}]
  # found 0 program(s)
# (t=80.71) fallback i=10, candidate=[{'ANSWER': 10.95}]
  # found 0 program(s)
# (t=83.32) fallback i=11, candidate=[{'ANSWER': 100.25}]
  # found 0 program(s)
# (t=85.93) fallback i=12, candidate=[{'ANSWER': 100.52}]
  # found 0 program(s)
# (t=88.55) fallback i=13, candidate=[{'ANSWER': 100.74}]
  # found 0 program(s)
# (t=91.17) fallback i=14, candidate=[{'ANSWER': 100.76}]
  # found 0 program(s)
# (t=94.13) fallback i=15, candidate=[{'ANSWER': 100.82}]
  # found 0 program(s)
# (t=96.75) fallback i=16, candidate=[{'ANSWER': 100.9}]
  # found 0 program(s)
# (t=99.37) fallback i=17, candidate=[{'ANSWER': 101.19}]
  # found 0 program(s)
# (t=101.99) fallback i=18, candidate=[{'ANSWER': 101.29}]
  # found 0 program(s)
# (t=104.61) fallback i=19, candidate=[{'ANSWER': 101.54}]
  # found 0 program(s)
# (t=107.26) fallback i=20, candidate=[{'ANSWER': 102.35}]
  # found 0 program(s)
# (t=110.23) fallback i=21, candidate=[{'ANSWER': 102.37}]
  # found 0 program(s)
# (t=112.85) fallback i=22, candidate=[{'ANSWER': 102.75}]
  # found 0 program(s)
# (t=115.46) fallback i=23, candidate=[{'ANSWER': 103.01}]
  # found 0 program(s)
# (t=118.08) fallback i=24, candidate=[{'ANSWER': 103.7}]
  # found 0 program(s)
# (t=120.70) fallback i=25, candidate=[{'ANSWER': 104.5}]
  # found 0 program(s)
# (t=123.65) fallback i=26, candidate=[{'ANSWER': 104.85}]
  # found 0 program(s)
# (t=126.27) fallback i=27, candidate=[{'ANSWER': 105.12}]
  # found 0 program(s)
# (t=128.88) fallback i=28, candidate=[{'ANSWER': 105.4}]
  # found 0 program(s)
# (t=131.50) fallback i=29, candidate=[{'ANSWER': 106.11}]
  # found 0 program(s)
# (t=134.12) fallback i=30, candidate=[{'ANSWER': 107.59}]
  # found 0 program(s)
# (t=137.07) fallback i=31, candidate=[{'ANSWER': 109.36}]
  # found 0 program(s)
# (t=139.69) fallback i=32, candidate=[{'ANSWER': 109.64}]
  # found 0 program(s)
# (t=142.31) fallback i=33, candidate=[{'ANSWER': 11.03}]
  # found 0 program(s)
# (t=144.93) fallback i=34, candidate=[{'ANSWER': 11.28}]
  # found 0 program(s)
# (t=147.53) fallback i=35, candidate=[{'ANSWER': 11.31}]
  # found 0 program(s)
# (t=150.49) fallback i=36, candidate=[{'ANSWER': 11.32}]
  # found 0 program(s)
# (t=153.11) fallback i=37, candidate=[{'ANSWER': 11.44}]
  # found 0 program(s)
# (t=155.73) fallback i=38, candidate=[{'ANSWER': 11.62}]
  # found 0 program(s)
# (t=158.34) fallback i=39, candidate=[{'ANSWER': 11.65}]
  # found 0 program(s)
# (t=160.96) fallback i=40, candidate=[{'ANSWER': 11.84}]
  # found 0 program(s)
# (t=163.61) fallback i=41, candidate=[{'ANSWER': 11.96}]
  # found 0 program(s)
# (t=166.60) fallback i=42, candidate=[{'ANSWER': 110.87}]
  # found 0 program(s)
# (t=169.22) fallback i=43, candidate=[{'ANSWER': 111.0}]
  # found 0 program(s)
# (t=171.82) fallback i=44, candidate=[{'ANSWER': 111.54}]
  # found 0 program(s)
# (t=174.43) fallback i=45, candidate=[{'ANSWER': 112.6}]
  # found 0 program(s)
# (t=177.01) fallback i=46, candidate=[{'ANSWER': 113.53}]
  # found 0 program(s)
# (t=179.93) fallback i=47, candidate=[{'ANSWER': 113.66}]
  # found 0 program(s)
# (t=182.54) fallback i=48, candidate=[{'ANSWER': 114.6}]
  # found 0 program(s)
# (t=185.16) fallback i=49, candidate=[{'ANSWER': 116.23}]
  # found 0 program(s)
# (t=187.78) fallback i=50, candidate=[{'ANSWER': 116.34}]
  # found 0 program(s)
# (t=190.39) fallback i=51, candidate=[{'ANSWER': 117.0}]
  # found 0 program(s)
# (t=193.34) fallback i=52, candidate=[{'ANSWER': 118.16}]
  # found 0 program(s)
# (t=195.96) fallback i=53, candidate=[{'ANSWER': 118.4}]
  # found 0 program(s)
# (t=198.57) fallback i=54, candidate=[{'ANSWER': 118.55}]
  # found 0 program(s)
# (t=201.19) fallback i=55, candidate=[{'ANSWER': 118.62}]
  # found 0 program(s)
# (t=203.81) fallback i=56, candidate=[{'ANSWER': 118.81}]
  # found 0 program(s)
# (t=206.76) fallback i=57, candidate=[{'ANSWER': 119.54}]
  # found 0 program(s)
# (t=209.36) fallback i=58, candidate=[{'ANSWER': 12.14}]
  # found 0 program(s)
# (t=211.98) fallback i=59, candidate=[{'ANSWER': 12.36}]
  # found 0 program(s)
# (t=214.59) fallback i=60, candidate=[{'ANSWER': 12.49}]
  # found 0 program(s)
# (t=217.20) fallback i=61, candidate=[{'ANSWER': 12.74}]
  # found 0 program(s)
# (t=220.15) fallback i=62, candidate=[{'ANSWER': 12.88}]
  # found 0 program(s)
# (t=222.77) fallback i=63, candidate=[{'ANSWER': 12.89}]
  # found 0 program(s)
# (t=225.40) fallback i=64, candidate=[{'ANSWER': 121.19}]
  # found 0 program(s)
# (t=228.04) fallback i=65, candidate=[{'ANSWER': 121.85}]
  # found 0 program(s)
# (t=230.64) fallback i=66, candidate=[{'ANSWER': 122.04}]
  # found 0 program(s)
# (t=233.60) fallback i=67, candidate=[{'ANSWER': 123.74}]
  # found 0 program(s)
# (t=236.21) fallback i=68, candidate=[{'ANSWER': 125.02}]
  # found 0 program(s)
# (t=238.83) fallback i=69, candidate=[{'ANSWER': 125.14}]
  # found 0 program(s)
# (t=241.46) fallback i=70, candidate=[{'ANSWER': 125.41}]
  # found 0 program(s)
# (t=244.07) fallback i=71, candidate=[{'ANSWER': 125.55}]
  # found 0 program(s)
# (t=246.69) fallback i=72, candidate=[{'ANSWER': 125.79}]
  # found 0 program(s)
# (t=249.67) fallback i=73, candidate=[{'ANSWER': 125.83}]
  # found 0 program(s)
# (t=252.29) fallback i=74, candidate=[{'ANSWER': 127.16}]
  # found 0 program(s)
# (t=254.92) fallback i=75, candidate=[{'ANSWER': 128.82}]
  # found 0 program(s)
# (t=257.53) fallback i=76, candidate=[{'ANSWER': 129.6}]
  # found 0 program(s)
# (t=260.14) fallback i=77, candidate=[{'ANSWER': 13.52}]
  # found 0 program(s)
# (t=263.09) fallback i=78, candidate=[{'ANSWER': 130.32}]
  # found 0 program(s)
# (t=265.71) fallback i=79, candidate=[{'ANSWER': 131.76}]
  # found 0 program(s)
# (t=268.31) fallback i=80, candidate=[{'ANSWER': 134.52}]
  # found 0 program(s)
# (t=270.90) fallback i=81, candidate=[{'ANSWER': 135.36}]
  # found 0 program(s)
# (t=273.49) fallback i=82, candidate=[{'ANSWER': 135.81}]
  # found 0 program(s)
# (t=276.44) fallback i=83, candidate=[{'ANSWER': 135.91}]
  # found 0 program(s)
# (t=279.06) fallback i=84, candidate=[{'ANSWER': 138.48}]
  # found 0 program(s)
# (t=281.67) fallback i=85, candidate=[{'ANSWER': 14.03}]
  # found 0 program(s)
# (t=284.29) fallback i=86, candidate=[{'ANSWER': 14.1}]
  # found 0 program(s)
# (t=286.94) fallback i=87, candidate=[{'ANSWER': 14.15}]
  # found 0 program(s)
# (t=289.89) fallback i=88, candidate=[{'ANSWER': 14.19}]
  # found 0 program(s)
# (t=292.48) fallback i=89, candidate=[{'ANSWER': 14.3}]
  # found 0 program(s)
# (t=295.10) fallback i=90, candidate=[{'ANSWER': 14.45}]
  # found 0 program(s)
# (t=297.72) fallback i=91, candidate=[{'ANSWER': 14.94}]
  # found 0 program(s)
---------- timeout ----------
# ====> fallback strategy (original) is triggered
# ====> use the original TaPas output as answer, which is: ['<tapas exception>']

# ========== review report ========== #
