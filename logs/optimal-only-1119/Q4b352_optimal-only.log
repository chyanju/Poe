# parsed arguments: Namespace(benchmark='Q4b352', dsl='meta_visqa', skeletons='visqa_normal', strategy='TaPas_C', fallback='auto', timeout=300, mode='optimal-only', expected_only=False)
# loading benchmark...
# table keywords: {'80', '65', '19930088', '7268299', '30', '55', '8977000', '22808830', '5', '20', '15', '10792360', '70', '10', '35', '20186259', '19046094', '17419067', '60', '9258407', '0', '5124536', 'age', 'color', '23110829', '45', '90', '19178000', '40', 'sum', '2951513', 'people', '20621710', '25', '20325175', 'blue', '75', '20585757', '1400884', '50', '19055559', '85', '13380350'}
# input type: [dtype('int64'), dtype('int64'), dtype('O')]
# input is:
    age  Sum of people color
0     0       19046094  blue
1     5       20621710  blue
2    10       20585757  blue
3    15       19930088  blue
4    20       19055559  blue
5    25       19178000  blue
6    30       20325175  blue
7    35       23110829  blue
8    40       22808830  blue
9    45       20186259  blue
10   50       17419067  blue
11   55       13380350  blue
12   60       10792360  blue
13   65        9258407  blue
14   70        8977000  blue
15   75        7268299  blue
16   80        5124536  blue
17   85        2951513  blue
18   90        1400884  blue
# query is: How large is the population for the youngest age?
# expected output type:[dtype('int64')]
# expected output is:
     ANSWER
0  19046094
# inferred DSL terminals:
  # ConstVal: ['age@Str', '<NULL>']
     # cmap: [('age', 'age')]
  # AggrFunc: ['<NULL>']
     # amap: []
  # NumFunc: ['<NULL>']
     # nmap: []
  # BoolFunc: ['==', '<NULL>']
     # bmap: [(None, '==')]
  # IndFunc: ['<NULL>']
     # imap: []
# loading skeleton list...

# ========== candidate program report ========== #
# (t=0.00) i=0, candidate=[{'ANSWER': 23110829}]
  # found 0 program(s)
# (t=0.36) i=1, candidate=[{'ANSWER': 19930088}]
  # found 0 program(s)
# (t=0.73) i=2, candidate=[{'ANSWER': 19055559}]
  # found 0 program(s)
# (t=1.09) i=3, candidate=[{'ANSWER': 19178000}]
  # found 0 program(s)
# (t=1.45) i=4, candidate=[{'ANSWER': 1400884}]
  # found 0 program(s)
# (t=1.81) i=5, candidate=[{'ANSWER': 19046094}]
  # found 0 program(s)
# (t=2.17) i=6, candidate=[{'ANSWER': 2951513}]
  # found 0 program(s)
# (t=2.52) i=7, candidate=[{'ANSWER': 20585757}]
  # found 0 program(s)
# (t=2.88) i=8, candidate=[{'ANSWER': 5124536}]
  # found 0 program(s)
# (t=3.24) i=9, candidate=[{'ANSWER': 20621710}]
  # found 0 program(s)
# (t=3.61) i=10, candidate=[{'ANSWER': 8977000}]
  # found 0 program(s)
# (t=3.96) i=11, candidate=[{'ANSWER': 9258407}]
  # found 0 program(s)
# (t=4.33) i=12, candidate=[{'ANSWER': 22808830}]
  # found 0 program(s)
# ====> fallback strategy (retrieval) is triggered because no explanation is found so far
# ====> retrieval_values: [0, 10, 10792360, 13380350, 1400884, 15, 17419067, 19046094, 19055559, 19178000, 19930088, 20, 20186259, 20325175, 20585757, 20621710, 22808830, 23110829, 25, 2951513, 30, 35, 40, 45, 5, 50, 5124536, 55, 60, 65, 70, 7268299, 75, 80, 85, 8977000, 90, 9258407, 'Sum of people', 'age', 'blue', 'color']
# (t=4.69) fallback i=0, candidate=[{'ANSWER': 0}]
  # found 0 program(s)
# (t=5.05) fallback i=1, candidate=[{'ANSWER': 10}]
  # found 0 program(s)
# (t=5.42) fallback i=2, candidate=[{'ANSWER': 10792360}]
  # found 0 program(s)
# (t=5.78) fallback i=3, candidate=[{'ANSWER': 13380350}]
  # found 0 program(s)
# (t=6.14) fallback i=4, candidate=[{'ANSWER': 1400884}]
  # found 0 program(s)
# (t=6.50) fallback i=5, candidate=[{'ANSWER': 15}]
  # found 0 program(s)
# (t=6.86) fallback i=6, candidate=[{'ANSWER': 17419067}]
  # found 0 program(s)
# (t=7.22) fallback i=7, candidate=[{'ANSWER': 19046094}]
  # found 0 program(s)
# (t=7.58) fallback i=8, candidate=[{'ANSWER': 19055559}]
  # found 0 program(s)
# (t=7.95) fallback i=9, candidate=[{'ANSWER': 19178000}]
  # found 0 program(s)
# (t=8.31) fallback i=10, candidate=[{'ANSWER': 19930088}]
  # found 0 program(s)
# (t=8.67) fallback i=11, candidate=[{'ANSWER': 20}]
  # found 0 program(s)
# (t=9.04) fallback i=12, candidate=[{'ANSWER': 20186259}]
  # found 0 program(s)
# (t=9.40) fallback i=13, candidate=[{'ANSWER': 20325175}]
  # found 0 program(s)
# (t=9.76) fallback i=14, candidate=[{'ANSWER': 20585757}]
  # found 0 program(s)
# (t=10.12) fallback i=15, candidate=[{'ANSWER': 20621710}]
  # found 0 program(s)
# (t=10.48) fallback i=16, candidate=[{'ANSWER': 22808830}]
  # found 0 program(s)
# (t=10.84) fallback i=17, candidate=[{'ANSWER': 23110829}]
  # found 0 program(s)
# (t=11.48) fallback i=18, candidate=[{'ANSWER': 25}]
  # found 0 program(s)
# (t=11.84) fallback i=19, candidate=[{'ANSWER': 2951513}]
  # found 0 program(s)
# (t=12.20) fallback i=20, candidate=[{'ANSWER': 30}]
  # found 0 program(s)
# (t=12.56) fallback i=21, candidate=[{'ANSWER': 35}]
  # found 0 program(s)
# (t=12.92) fallback i=22, candidate=[{'ANSWER': 40}]
  # found 0 program(s)
# (t=13.29) fallback i=23, candidate=[{'ANSWER': 45}]
  # found 0 program(s)
# (t=13.64) fallback i=24, candidate=[{'ANSWER': 5}]
  # found 0 program(s)
# (t=14.00) fallback i=25, candidate=[{'ANSWER': 50}]
  # found 0 program(s)
# (t=14.37) fallback i=26, candidate=[{'ANSWER': 5124536}]
  # found 0 program(s)
# (t=14.74) fallback i=27, candidate=[{'ANSWER': 55}]
  # found 0 program(s)
# (t=15.10) fallback i=28, candidate=[{'ANSWER': 60}]
  # found 0 program(s)
# (t=15.47) fallback i=29, candidate=[{'ANSWER': 65}]
  # found 0 program(s)
# (t=15.83) fallback i=30, candidate=[{'ANSWER': 70}]
  # found 0 program(s)
# (t=16.20) fallback i=31, candidate=[{'ANSWER': 7268299}]
  # found 0 program(s)
# (t=16.56) fallback i=32, candidate=[{'ANSWER': 75}]
  # found 0 program(s)
# (t=16.92) fallback i=33, candidate=[{'ANSWER': 80}]
  # found 0 program(s)
# (t=17.28) fallback i=34, candidate=[{'ANSWER': 85}]
  # found 0 program(s)
# (t=17.64) fallback i=35, candidate=[{'ANSWER': 8977000}]
  # found 0 program(s)
# (t=18.00) fallback i=36, candidate=[{'ANSWER': 90}]
  # found 0 program(s)
# (t=18.37) fallback i=37, candidate=[{'ANSWER': 9258407}]
  # found 0 program(s)
# (t=18.73) fallback i=38, candidate=[{'ANSWER': 'Sum of people'}]
  # found 0 program(s)
# (t=19.09) fallback i=39, candidate=[{'ANSWER': 'age'}]
  # found 0 program(s)
# (t=19.45) fallback i=40, candidate=[{'ANSWER': 'blue'}]
  # found 0 program(s)
# (t=19.81) fallback i=41, candidate=[{'ANSWER': 'color'}]
  # found 0 program(s)
# ====> fallback strategy (original) is triggered
# ====> use the original TaPas output as answer, which is: ['<type error>']

# ========== review report ========== #
