# parsed arguments: Namespace(benchmark='Q05963', dsl='meta_visqa', skeletons='visqa_normal', strategy='TaPas_C', fallback='auto', timeout=300, mode='full', expected_only=False)
# loading benchmark...
# table keywords: {'2139', '1664', '81', '863', 'ios', 'platform', 'solaris', 'bsd', '193', '636', '300', '15233', '7240', 'color', '162', 'hardware', '190', 'linux', 'osx', 'blue', 'cgi', 'lin_x86', 'aix', 'jsp', '100', 'unix', 'php', 'windows', '230', '80', 'asp', 'count', '1426', 'multiple'}
# input type: [dtype('O'), dtype('int64'), dtype('O')]
# input is:
    Platform  count color
0        bsd     80  blue
1        aix     81  blue
2        ios    100  blue
3        jsp    162  blue
4    solaris    190  blue
5    lin_x86    193  blue
6        osx    230  blue
7       unix    300  blue
8        cgi    636  blue
9   hardware    863  blue
10       asp   1426  blue
11  multiple   1664  blue
12     linux   2139  blue
13   windows   7240  blue
14       php  15233  blue
# query is: How many software platforms have had one hundred or fewer security vulnerabilities?
# expected output type:[dtype('int64')]
# expected output is:
   ANSWER
0       3
# inferred DSL terminals:
  # ConstVal: ['Platform@Str', '<NULL>']
     # cmap: [('platforms', 'Platform')]
  # AggrFunc: ['count', '<NULL>']
     # amap: [('how many', 'count')]
  # NumFunc: ['<NULL>']
     # nmap: []
  # BoolFunc: ['==', '<=', '<', '<NULL>']
     # bmap: [(None, '=='), ('fewer', '<'), ('fewer', '<=')]
  # IndFunc: ['<NULL>']
     # imap: []
# ====> fallback strategy (selection) is triggered
  # [debug] fallback (selection) answers: ['Platform']
  # [debug] fallback (selection) answers (no dup.): ['Platform']
  # [debug] 1 fallback (selection) answers are added
# loading skeleton list...

# ========== candidate program report ========== #
# (t=0.00) i=0, candidate=[{'ANSWER': 1}]
  # found 0 program(s)
# (t=0.34) i=1, candidate=[{'ANSWER': 2}]
  # found 0 program(s)
# (t=0.68) i=2, candidate=[{'ANSWER': 'Platform'}]
  # found 0 program(s)
# ====> fallback strategy (retrieval) is triggered because no explanation is found so far
# ====> retrieval_values: [100, 1426, 15233, 162, 1664, 190, 193, 2139, 230, 300, 636, 7240, 80, 81, 863, 'Platform', 'aix', 'asp', 'blue', 'bsd', 'cgi', 'color', 'count', 'hardware', 'ios', 'jsp', 'lin_x86', 'linux', 'multiple', 'osx', 'php', 'solaris', 'unix', 'windows']
# (t=1.03) fallback i=0, candidate=[{'ANSWER': 100}]
  # found 0 program(s)
# (t=1.44) fallback i=1, candidate=[{'ANSWER': 1426}]
  # found 0 program(s)
# (t=1.85) fallback i=2, candidate=[{'ANSWER': 15233}]
  # found 0 program(s)
# (t=2.27) fallback i=3, candidate=[{'ANSWER': 162}]
  # found 0 program(s)
# (t=2.69) fallback i=4, candidate=[{'ANSWER': 1664}]
  # found 0 program(s)
# (t=3.09) fallback i=5, candidate=[{'ANSWER': 190}]
  # found 0 program(s)
# (t=3.50) fallback i=6, candidate=[{'ANSWER': 193}]
  # found 0 program(s)
# (t=3.90) fallback i=7, candidate=[{'ANSWER': 2139}]
  # found 0 program(s)
# (t=4.31) fallback i=8, candidate=[{'ANSWER': 230}]
  # found 0 program(s)
# (t=4.71) fallback i=9, candidate=[{'ANSWER': 300}]
  # found 0 program(s)
# (t=5.12) fallback i=10, candidate=[{'ANSWER': 636}]
  # found 0 program(s)
# (t=5.53) fallback i=11, candidate=[{'ANSWER': 7240}]
  # found 0 program(s)
# (t=5.93) fallback i=12, candidate=[{'ANSWER': 80}]
  # found 0 program(s)
# (t=6.34) fallback i=13, candidate=[{'ANSWER': 81}]
  # found 0 program(s)
# (t=6.75) fallback i=14, candidate=[{'ANSWER': 863}]
  # found 0 program(s)
# (t=7.16) fallback i=15, candidate=[{'ANSWER': 'Platform'}]
  # found 0 program(s)
# (t=7.50) fallback i=16, candidate=[{'ANSWER': 'aix'}]
  # found 0 program(s)
# (t=7.91) fallback i=17, candidate=[{'ANSWER': 'asp'}]
  # found 0 program(s)
# (t=8.32) fallback i=18, candidate=[{'ANSWER': 'blue'}]
  # found 0 program(s)
# (t=8.73) fallback i=19, candidate=[{'ANSWER': 'bsd'}]
  # found 0 program(s)
# (t=9.15) fallback i=20, candidate=[{'ANSWER': 'cgi'}]
  # found 0 program(s)
# (t=9.56) fallback i=21, candidate=[{'ANSWER': 'color'}]
  # found 0 program(s)
# (t=9.91) fallback i=22, candidate=[{'ANSWER': 'count'}]
  # found 0 program(s)
# (t=10.26) fallback i=23, candidate=[{'ANSWER': 'hardware'}]
  # found 0 program(s)
# (t=10.67) fallback i=24, candidate=[{'ANSWER': 'ios'}]
  # found 0 program(s)
# (t=11.08) fallback i=25, candidate=[{'ANSWER': 'jsp'}]
  # found 0 program(s)
# (t=11.50) fallback i=26, candidate=[{'ANSWER': 'lin_x86'}]
  # found 0 program(s)
# (t=11.91) fallback i=27, candidate=[{'ANSWER': 'linux'}]
  # found 0 program(s)
# (t=12.33) fallback i=28, candidate=[{'ANSWER': 'multiple'}]
  # found 0 program(s)
# (t=12.74) fallback i=29, candidate=[{'ANSWER': 'osx'}]
  # found 0 program(s)
# (t=13.16) fallback i=30, candidate=[{'ANSWER': 'php'}]
  # found 0 program(s)
# (t=13.57) fallback i=31, candidate=[{'ANSWER': 'solaris'}]
  # found 0 program(s)
# (t=13.98) fallback i=32, candidate=[{'ANSWER': 'unix'}]
  # found 0 program(s)
# (t=14.39) fallback i=33, candidate=[{'ANSWER': 'windows'}]
  # found 0 program(s)
# ====> fallback strategy (original) is triggered
# ====> use the original TaPas output as answer, which is: [4]

# ========== review report ========== #
