# parsed arguments: Namespace(benchmark='Qb39e8', dsl='meta_visqa', skeletons='visqa_normal', strategy='TaPas_C', fallback='auto', timeout=300, mode='full', expected_only=False)
# loading benchmark...
# table keywords: {'jordan', 'iraq', 'regional', 'go', 'to', '15804557', '40221893', '37812334', 'turkey', 'lebanon', '28029721', '1700000', 'funds', '22094911', 'country', 'total', 'color', 'blue', 'egypt'}
# input type: [dtype('O'), dtype('int64'), dtype('O')]
# input is:
    Country  Total funds go to color
0    Jordan           40221893  blue
1   Lebanon           37812334  blue
2  Regional           28029721  blue
3    Turkey           22094911  blue
4      Iraq           15804557  blue
5     Egypt            1700000  blue
# query is: Which countries get less than Turkey?
# expected output type:[dtype('O')]
# expected output is:
  ANSWER
0  Egypt
1   Iraq
# inferred DSL terminals:
  # ConstVal: ['Country@Str', 'Turkey@Str', '<NULL>']
     # cmap: [('turkey', 'Turkey'), ('countries', 'Country')]
  # AggrFunc: ['<NULL>']
     # amap: []
  # NumFunc: ['-', '<NULL>']
     # nmap: [('less', '-')]
  # BoolFunc: ['==', '<', '<=', '<NULL>']
     # bmap: [('less', '<='), (None, '=='), ('less', '<')]
  # IndFunc: ['<NULL>']
     # imap: []
# ====> fallback strategy (comparison) is triggered
  # [debug] high_values: []
  # [debug] high_values (no dup.): [(20394911, 2), (18126982, 2), (15717423, 2), (6290354, 2), (5934810, 2), (-5934810, 2), (-6290354, 2), (-15717423, 2), (-18126982, 2), (-20394911, 2)]
# loading skeleton list...

# ========== candidate program report ========== #
# (t=0.00) i=0, candidate=[{'ANSWER': 'Iraq'}]
  # found 0 program(s)
# (t=0.72) i=1, candidate=[{'ANSWER': 'Egypt'}]
  # found 0 program(s)
# (t=1.43) i=2, candidate=[{'ANSWER': 'Egypt'}, {'ANSWER': 'Iraq'}]
  # found 0 program(s)
# (t=1.57) i=3, candidate=[{'ANSWER': 'Egypt'}, {'ANSWER': 'Iraq'}, {'ANSWER': 'Turkey'}]
  # found 0 program(s)
# (t=1.71) i=4, candidate=[{'ANSWER': 'Iraq'}, {'ANSWER': 'Turkey'}]
  # found 0 program(s)
# (t=1.85) i=5, candidate=[{'ANSWER': 'Egypt'}, {'ANSWER': 'Turkey'}]
  # found 0 program(s)
# (t=1.99) i=6, candidate=[{'ANSWER': 'Turkey'}]
  # found 2 program(s)
    # SelectCol(SelectRow1(@param0, ==, 0, Turkey@Str), ['0'])
      --> ['SelectCol', ['SelectRow1', 'input@0', '==', 'Country', 'Turkey'], ['Country']]
    # SelectCol(SelectRow1(@param0, ==, 0, Turkey@Str), ['-1', '-2'])
      --> ['SelectCol', ['SelectRow1', 'input@0', '==', 'Country', 'Turkey'], ['Country']]

# ========== review report ========== #
# top-1, score: 2.48, answer: Turkey
  # tprog: SelectCol(SelectRow1(@param0, ==, 0, Turkey@Str), ['0'])
# top-2, score: 2.48, answer: Turkey
  # tprog: SelectCol(SelectRow1(@param0, ==, 0, Turkey@Str), ['-1', '-2'])
