# parsed arguments: Namespace(benchmark='Qd35df', dsl='meta_visqa', skeletons='visqa_normal', strategy='TaPas_C', fallback='auto', timeout=300, mode='full', expected_only=False)
# loading benchmark...
# table keywords: {'brazil', 'japan', '20.8', '75.2', '0.2', '9.7', '11.8', 'hong', 'macau', '26.0', 'urban/total', 'maldives', '2.5', '1.0', '0.5', '17.1', 'south', 'kong', 'square', '21.5', 'kilometers', 'rwanda', '25.4', 'total', 'france', 'germany', 'korea', 'persons', 'urban', 'singapore', 'australia', '3.9', 'indonesia', 'egypt', 'per', 'india', 'color', '16.6', '1.8', '0.4', '7.4', '5.1', '0.1', 'orange', '25.2', '6.4', '18.0', 'country', 'bangladesh', '7.5', 'monaco', '6.8', 'blue'}
# input type: [dtype('O'), dtype('O'), dtype('float64'), dtype('O')]
# input is:
        Country Urban/total  Persons per square kilometers   color
0         Egypt       Urban                            5.1  orange
1         Egypt       Total                            0.1    blue
2        Rwanda       Urban                           18.0  orange
3        Rwanda       Total                            0.5    blue
4        Brazil       Urban                            9.7    blue
5     Singapore       Urban                            7.5  orange
6     Singapore       Total                            7.4    blue
7         Macau       Urban                           26.0  orange
8         Macau       Total                           20.8    blue
9     Australia       Urban                            1.8    blue
10        India       Urban                           25.2  orange
11        India       Total                            0.4    blue
12       France       Urban                            2.5  orange
13       France       Total                            0.1    blue
14        Japan       Urban                            3.9  orange
15        Japan       Total                            0.5    blue
16   Bangladesh       Urban                           75.2  orange
17   Bangladesh       Total                            1.0    blue
18      Germany       Urban                            6.8  orange
19      Germany       Total                            0.2    blue
20     Maldives       Urban                           21.5  orange
21     Maldives       Total                            1.0    blue
22    Indonesia       Urban                           16.6  orange
23    Indonesia       Total                            0.1    blue
24       Monaco       Urban                           17.1  orange
25       Monaco       Total                           17.1    blue
26    Hong Kong       Urban                           25.4  orange
27    Hong Kong       Total                            6.4    blue
28  South Korea       Urban                           11.8  orange
29  South Korea       Total                            0.5    blue
# query is: How much more urban population density is India vs. Indonesia?
# expected output type:[dtype('float64')]
# expected output is:
   ANSWER
0     8.6
# inferred DSL terminals:
  # ConstVal: ['Urban@Str', 'India@Str', 'Indonesia@Str', 'Urban/total@Str', '<NULL>']
     # cmap: [('urban', 'Urban/total'), ('indonesia', 'Indonesia'), ('urban', 'Urban'), ('india', 'India')]
  # AggrFunc: ['<NULL>']
     # amap: []
  # NumFunc: ['-', '<NULL>']
     # nmap: [('more', '-')]
  # BoolFunc: ['>', '==', '>=', '<NULL>']
     # bmap: [('more', '>'), (None, '=='), ('more', '>=')]
  # IndFunc: ['<NULL>']
     # imap: []
# ====> fallback strategy (comparison) is triggered
  # [debug] high_values: [(8.599999999999998, 9), (-8.599999999999998, 9), (58.6, 6), (50.0, 6), (25.099999999999998, 6), (24.8, 6), (23.4, 6), (22.7, 6), (21.3, 6), (20.1, 6)]
  # [debug] high_values (no dup.): [(25.099999999999998, 3), (25.099999999999998, 3), (25.0, 3), (24.7, 3), (24.7, 3), (24.7, 3), (24.2, 3), (24.2, 3), (18.799999999999997, 3), (17.799999999999997, 3)]
  # [debug] fallback (comparison) answers are added
# loading skeleton list...

# ========== candidate program report ========== #
# (t=0.00) i=0, candidate=[{'ANSWER': 1}]
  # found 0 program(s)
# (t=6.29) i=1, candidate=[{'ANSWER': 8.599999999999998}]
  # found 1 program(s)
    # Contrast(SelectRow1(@param0, ==, 1, Urban@Str), -, 0, India@Str, Indonesia@Str, 2)
      --> ['Contrast', ['SelectRow1', 'input@0', '==', 'Urban/total', 'Urban'], '-', 'Country', 'India', 'Indonesia', 'Persons per square kilometers']
# (t=11.61) i=2, candidate=[{'ANSWER': -8.599999999999998}]
  # found 1 program(s)
    # Contrast(SelectRow1(@param0, ==, 1, Urban@Str), -, 0, Indonesia@Str, India@Str, 2)
      --> ['Contrast', ['SelectRow1', 'input@0', '==', 'Urban/total', 'Urban'], '-', 'Country', 'Indonesia', 'India', 'Persons per square kilometers']
# (t=17.00) i=3, candidate=[{'ANSWER': 58.6}]
  # found 0 program(s)
# (t=22.37) i=4, candidate=[{'ANSWER': 50.0}]
  # found 0 program(s)
# (t=27.74) i=5, candidate=[{'ANSWER': 25.099999999999998}]
  # found 0 program(s)
# (t=33.09) i=6, candidate=[{'ANSWER': 24.8}]
  # found 0 program(s)
# (t=38.47) i=7, candidate=[{'ANSWER': 23.4}]
  # found 0 program(s)
# (t=43.90) i=8, candidate=[{'ANSWER': 22.7}]
  # found 0 program(s)
# (t=49.32) i=9, candidate=[{'ANSWER': 21.3}]
  # found 0 program(s)
# (t=54.69) i=10, candidate=[{'ANSWER': 20.1}]
  # found 0 program(s)

# ========== review report ========== #
# top-1, score: 2.49, answer: 8.599999999999998
  # tprog: Contrast(SelectRow1(@param0, ==, 1, Urban@Str), -, 0, India@Str, Indonesia@Str, 2)
# top-2, score: 2.49, answer: -8.599999999999998
  # tprog: Contrast(SelectRow1(@param0, ==, 1, Urban@Str), -, 0, Indonesia@Str, India@Str, 2)
