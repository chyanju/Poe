# parsed arguments: Namespace(benchmark='Qad023', dsl='meta_visqa', skeletons='visqa_normal', strategy='TaPas_C', fallback='auto', timeout=300, mode='full', expected_only=False)
# loading benchmark...
# table keywords: {'276488', 'city', 'southampton', 'stansted', 'blue', 'birmingham', '100003', '158239', '331607', 'handled', 'gatwick', 'international', 'color', '266987', '173576', 'luton', '828531', 'bristol', '607417', 'passengers', 'heathrow', 'london', 'belfast', 'airport', '208123', '239666'}
# input type: [dtype('O'), dtype('int64'), dtype('O')]
# input is:
                 Airport  Passengers handled color
0        London Heathrow              828531  blue
1         London Gatwick              607417  blue
2        London Stansted              331607  blue
3           London Luton              276488  blue
4  Belfast International              266987  blue
5                Bristol              239666  blue
6             Birmingham              208123  blue
7            Southampton              173576  blue
8            London City              158239  blue
9           Belfast City              100003  blue
# query is: What is the average of passengers handled over all airports?
# expected output type:[dtype('float64')]
# expected output is:
     ANSWER
0  319063.7
# inferred DSL terminals:
  # ConstVal: ['Passengers handled@Str', 'Airport@Str', '<NULL>']
     # cmap: [('airports', 'Airport'), ('handled', 'Passengers handled'), ('passengers', 'Passengers handled')]
  # AggrFunc: ['mean', 'sum', '<NULL>']
     # amap: [('all', 'sum'), ('average', 'mean')]
  # NumFunc: ['<NULL>']
     # nmap: []
  # BoolFunc: ['==', '<NULL>']
     # bmap: [(None, '==')]
  # IndFunc: ['<NULL>']
     # imap: []
# loading skeleton list...

# ========== candidate program report ========== #
# (t=0.00) i=0, candidate=[{'ANSWER': 828531.0}]
  # found 0 program(s)
# (t=0.63) i=1, candidate=[{'ANSWER': 607417.0}]
  # found 0 program(s)
# (t=1.26) i=2, candidate=[{'ANSWER': 100003.0}]
  # found 0 program(s)
# (t=1.88) i=3, candidate=[{'ANSWER': 331607.0}]
  # found 0 program(s)
# (t=2.50) i=4, candidate=[{'ANSWER': 266987.0}]
  # found 0 program(s)
# (t=3.12) i=5, candidate=[{'ANSWER': 276488.0}]
  # found 0 program(s)
# (t=3.73) i=6, candidate=[{'ANSWER': 239666.0}]
  # found 0 program(s)
# (t=4.34) i=7, candidate=[{'ANSWER': 208123.0}]
  # found 0 program(s)
# (t=4.95) i=8, candidate=[{'ANSWER': 173576.0}]
  # found 0 program(s)
# (t=5.57) i=9, candidate=[{'ANSWER': 158239.0}]
  # found 0 program(s)
# ====> fallback strategy (retrieval) is triggered because no explanation is found so far
# ====> retrieval_values: [100003, 158239, 173576, 208123, 239666, 266987, 276488, 331607, 607417, 828531, 'Airport', 'Belfast City', 'Belfast International', 'Birmingham', 'Bristol', 'London City', 'London Gatwick', 'London Heathrow', 'London Luton', 'London Stansted', 'Passengers handled', 'Southampton', 'blue', 'color']
# (t=6.19) fallback i=0, candidate=[{'ANSWER': 100003}]
  # found 0 program(s)
# (t=6.80) fallback i=1, candidate=[{'ANSWER': 158239}]
  # found 0 program(s)
# (t=7.42) fallback i=2, candidate=[{'ANSWER': 173576}]
  # found 0 program(s)
# (t=8.03) fallback i=3, candidate=[{'ANSWER': 208123}]
  # found 0 program(s)
# (t=8.64) fallback i=4, candidate=[{'ANSWER': 239666}]
  # found 0 program(s)
# (t=9.24) fallback i=5, candidate=[{'ANSWER': 266987}]
  # found 0 program(s)
# (t=9.84) fallback i=6, candidate=[{'ANSWER': 276488}]
  # found 0 program(s)
# (t=10.45) fallback i=7, candidate=[{'ANSWER': 331607}]
  # found 0 program(s)
# (t=11.07) fallback i=8, candidate=[{'ANSWER': 607417}]
  # found 0 program(s)
# (t=11.68) fallback i=9, candidate=[{'ANSWER': 828531}]
  # found 0 program(s)
# (t=12.28) fallback i=10, candidate=[{'ANSWER': 'Airport'}]
  # found 0 program(s)
# (t=12.73) fallback i=11, candidate=[{'ANSWER': 'Belfast City'}]
  # found 0 program(s)
# (t=13.34) fallback i=12, candidate=[{'ANSWER': 'Belfast International'}]
  # found 0 program(s)
# (t=13.95) fallback i=13, candidate=[{'ANSWER': 'Birmingham'}]
  # found 0 program(s)
# (t=14.56) fallback i=14, candidate=[{'ANSWER': 'Bristol'}]
  # found 0 program(s)
# (t=15.16) fallback i=15, candidate=[{'ANSWER': 'London City'}]
  # found 0 program(s)
# (t=15.78) fallback i=16, candidate=[{'ANSWER': 'London Gatwick'}]
  # found 0 program(s)
# (t=16.39) fallback i=17, candidate=[{'ANSWER': 'London Heathrow'}]
  # found 0 program(s)
# (t=17.01) fallback i=18, candidate=[{'ANSWER': 'London Luton'}]
  # found 0 program(s)
# (t=17.62) fallback i=19, candidate=[{'ANSWER': 'London Stansted'}]
  # found 0 program(s)
# (t=18.23) fallback i=20, candidate=[{'ANSWER': 'Passengers handled'}]
  # found 0 program(s)
# (t=18.68) fallback i=21, candidate=[{'ANSWER': 'Southampton'}]
  # found 0 program(s)
# (t=19.28) fallback i=22, candidate=[{'ANSWER': 'blue'}]
  # found 0 program(s)
# (t=19.88) fallback i=23, candidate=[{'ANSWER': 'color'}]
  # found 0 program(s)
# ====> fallback strategy (original) is triggered
# ====> use the original TaPas output as answer, which is: [717974.0]

# ========== review report ========== #
