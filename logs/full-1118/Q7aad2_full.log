# parsed arguments: Namespace(benchmark='Q7aad2', dsl='meta_visqa', skeletons='visqa_normal', strategy='TaPas_C', fallback='auto', timeout=300, mode='full', expected_only=False)
# loading benchmark...
# table keywords: {'2000000', 'belgium', '5475452', 'germany', 'commission', 'ireland', '7033231', '26000000', 'donations', 'color', 'blue', '1356852', '30033922', 'japan', 'china', 'us', 'country', 'european', '2713704', 'kuwait', 'netherlands', '1000000', '67030000', 'norway', 'finland'}
# input type: [dtype('O'), dtype('int64'), dtype('O')]
# input is:
                Country  Donations color
0                    US   67030000  blue
1   European Commission   30033922  blue
2                 Japan   26000000  blue
3           Netherlands    7033231  blue
4                Norway    5475452  blue
5               Germany    2713704  blue
6                Kuwait    2000000  blue
7               Finland    1356852  blue
8               Belgium    1356852  blue
9               Ireland    1356852  blue
10                China    1000000  blue
# query is: How much has the Netherlands donated to Syrian refugees?
# expected output type:[dtype('int64')]
# expected output is:
    ANSWER
0  7033231
# inferred DSL terminals:
  # ConstVal: ['<NULL>']
     # cmap: []
  # AggrFunc: ['<NULL>']
     # amap: []
  # NumFunc: ['<NULL>']
     # nmap: []
  # BoolFunc: ['==', '<NULL>']
     # bmap: [(None, '==')]
  # IndFunc: ['<NULL>']
     # imap: []
# loading skeleton list...

# ========== candidate program report ========== #
# (t=0.00) i=0, candidate=[{'ANSWER': 7033231}]
  # found 0 program(s)
# (t=0.12) i=1, candidate=[{'ANSWER': 14066462}]
  # found 0 program(s)
# (t=0.20) i=2, candidate=[{'ANSWER': 21099693}]
  # found 0 program(s)
# (t=0.27) i=3, candidate=[{'ANSWER': 15066462}]
  # found 0 program(s)
# (t=0.35) i=4, candidate=[{'ANSWER': 8033231}]
  # found 0 program(s)
# (t=0.42) i=5, candidate=[{'ANSWER': 9033231}]
  # found 0 program(s)
# (t=0.50) i=6, candidate=[{'ANSWER': 1000000}]
  # found 0 program(s)
# (t=0.62) i=7, candidate=[{'ANSWER': 2000000}]
  # found 0 program(s)
# (t=0.74) i=8, candidate=[{'ANSWER': 3000000}]
  # found 0 program(s)
# ====> fallback strategy (retrieval) is triggered because no explanation is found so far
# ====> retrieval_values: [1000000, 1356852, 2000000, 26000000, 2713704, 30033922, 5475452, 67030000, 7033231, 'Belgium', 'China', 'Country', 'Donations', 'European Commission', 'Finland', 'Germany', 'Ireland', 'Japan', 'Kuwait', 'Netherlands', 'Norway', 'US', 'blue', 'color']
# (t=0.81) fallback i=0, candidate=[{'ANSWER': 1000000}]
  # found 0 program(s)
# (t=0.93) fallback i=1, candidate=[{'ANSWER': 1356852}]
  # found 0 program(s)
# (t=1.05) fallback i=2, candidate=[{'ANSWER': 2000000}]
  # found 0 program(s)
# (t=1.17) fallback i=3, candidate=[{'ANSWER': 26000000}]
  # found 0 program(s)
# (t=1.29) fallback i=4, candidate=[{'ANSWER': 2713704}]
  # found 0 program(s)
# (t=1.41) fallback i=5, candidate=[{'ANSWER': 30033922}]
  # found 0 program(s)
# (t=1.53) fallback i=6, candidate=[{'ANSWER': 5475452}]
  # found 0 program(s)
# (t=1.64) fallback i=7, candidate=[{'ANSWER': 67030000}]
  # found 0 program(s)
# (t=1.76) fallback i=8, candidate=[{'ANSWER': 7033231}]
  # found 0 program(s)
# (t=1.88) fallback i=9, candidate=[{'ANSWER': 'Belgium'}]
  # found 0 program(s)
# (t=2.00) fallback i=10, candidate=[{'ANSWER': 'China'}]
  # found 0 program(s)
# (t=2.12) fallback i=11, candidate=[{'ANSWER': 'Country'}]
  # found 0 program(s)
# (t=2.20) fallback i=12, candidate=[{'ANSWER': 'Donations'}]
  # found 0 program(s)
# (t=2.27) fallback i=13, candidate=[{'ANSWER': 'European Commission'}]
  # found 0 program(s)
# (t=2.39) fallback i=14, candidate=[{'ANSWER': 'Finland'}]
  # found 0 program(s)
# (t=2.51) fallback i=15, candidate=[{'ANSWER': 'Germany'}]
  # found 0 program(s)
# (t=2.63) fallback i=16, candidate=[{'ANSWER': 'Ireland'}]
  # found 0 program(s)
# (t=2.75) fallback i=17, candidate=[{'ANSWER': 'Japan'}]
  # found 0 program(s)
# (t=2.87) fallback i=18, candidate=[{'ANSWER': 'Kuwait'}]
  # found 0 program(s)
# (t=2.99) fallback i=19, candidate=[{'ANSWER': 'Netherlands'}]
  # found 0 program(s)
# (t=3.11) fallback i=20, candidate=[{'ANSWER': 'Norway'}]
  # found 0 program(s)
# (t=3.23) fallback i=21, candidate=[{'ANSWER': 'US'}]
  # found 0 program(s)
# (t=3.35) fallback i=22, candidate=[{'ANSWER': 'blue'}]
  # found 0 program(s)
# (t=3.47) fallback i=23, candidate=[{'ANSWER': 'color'}]
  # found 0 program(s)
# ====> fallback strategy (original) is triggered
# ====> use the original TaPas output as answer, which is: [7033231]

# ========== review report ========== #
