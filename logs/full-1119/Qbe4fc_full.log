# parsed arguments: Namespace(benchmark='Qbe4fc', dsl='meta_visqa', skeletons='visqa_normal', strategy='TaPas_C', fallback='auto', timeout=300, mode='full', expected_only=False)
# loading benchmark...
# table keywords: {'rep.', '22', 'spain', 'opinion', 'red', '52', 'russia', '18', 'greece', 'blue', '84', 'orange', '24', '40', '2', 'tunisia', '27', '26', '83', '5', '12', '16', 'turkey', 'u.s.', 'lebanon', '49', 'india', 'country', 'brazil', 'color', 'france', 'japan', '13', '34', 'remain', 'germany', '31', '75', '81', 'jordan', '50', '23', '35', '44', 'pakistan', '28', '20', '29', '51', 'improve', '25', 'mexico', 'percentage', 'poland', 'egypt', '37', 'italy', '60', '43', '10', 'worsen', '47', '9', '45', 'czech', '33', '32', 'britain', 'same', '15', 'china'}
# input type: [dtype('O'), dtype('O'), dtype('int64'), dtype('O')]
# input is:
       Country          opinion  percentage   color
0       Brazil          Improve          84    blue
1       Brazil  Remain the same          12  orange
2       Brazil           Worsen           5     red
3        China          Improve          83    blue
4        China  Remain the same           9  orange
..         ...              ...         ...     ...
58  Czech Rep.  Remain the same          27  orange
59  Czech Rep.           Worsen          60     red
60      Greece          Improve           9    blue
61      Greece  Remain the same          10  orange
62      Greece           Worsen          81     red

[63 rows x 4 columns]
# query is: Which countries have more than 50% of responses believing that the economy will improve?
# expected output type:[dtype('O')]
# expected output is:
    ANSWER
0   Brazil
1    China
2   Mexico
3  Tunisia
4     U.S.
# inferred DSL terminals:
  # ConstVal: ['Country@Str', '50@Int', 'Improve@Str', '<NULL>']
     # cmap: [(50, 50), ('countries', 'Country'), ('improve', 'Improve')]
  # AggrFunc: ['<NULL>']
     # amap: []
  # NumFunc: ['-', '<NULL>']
     # nmap: [('more', '-')]
  # BoolFunc: ['>=', '>', '==', '<NULL>']
     # bmap: [('more', '>'), ('more', '>='), (None, '==')]
  # IndFunc: ['<NULL>']
     # imap: []
# ====> fallback strategy (comparison) is triggered
  # [debug] high_values: [(41, 6), (37, 6), (34, 6), (34, 6), (33, 6), (32, 6), (28, 6), (28, 6), (28, 6), (25, 6)]
  # [debug] high_values (no dup.): [(41, 6), (37, 6), (34, 6), (34, 6), (33, 6), (32, 6), (28, 6), (28, 6), (28, 6), (25, 6)]
  # [debug] filtered low_values (no dup.): [(48, 3), (45, 3), (41, 3), (40, 3), (38, 3), (38, 3), (38, 3), (35, 3), (34, 3), (31, 3)]
  # [debug] fallback (comparison) answers are added
# loading skeleton list...

# ========== candidate program report ========== #
# (t=0.00) i=0, candidate=[{'ANSWER': 'Brazil'}]
  # found 0 program(s)
# (t=4.87) i=1, candidate=[{'ANSWER': 'China'}]
  # found 0 program(s)
# (t=9.32) i=2, candidate=[{'ANSWER': 'Tunisia'}]
  # found 0 program(s)
# (t=13.73) i=3, candidate=[{'ANSWER': 'Brazil'}, {'ANSWER': 'China'}]
  # found 0 program(s)
# (t=14.72) i=4, candidate=[{'ANSWER': 'Brazil'}, {'ANSWER': 'Tunisia'}]
  # found 0 program(s)
# (t=15.70) i=5, candidate=[{'ANSWER': 'China'}, {'ANSWER': 'Tunisia'}]
  # found 0 program(s)
# (t=16.68) i=6, candidate=[{'ANSWER': 'Brazil'}, {'ANSWER': 'Mexico'}]
  # found 0 program(s)
# (t=17.69) i=7, candidate=[{'ANSWER': 'China'}, {'ANSWER': 'Mexico'}]
  # found 0 program(s)
# (t=18.69) i=8, candidate=[{'ANSWER': 'Mexico'}, {'ANSWER': 'Tunisia'}]
  # found 0 program(s)
# (t=19.68) i=9, candidate=[{'ANSWER': 'Mexico'}]
  # found 0 program(s)
# (t=24.03) i=10, candidate=[{'ANSWER': 'Brazil'}, {'ANSWER': 'U.S.'}]
  # found 0 program(s)
# (t=25.22) i=11, candidate=[{'ANSWER': 'China'}, {'ANSWER': 'U.S.'}]
  # found 0 program(s)
# (t=26.24) i=12, candidate=[{'ANSWER': 'Tunisia'}, {'ANSWER': 'U.S.'}]
  # found 0 program(s)
# (t=27.26) i=13, candidate=[{'ANSWER': 'Mexico'}, {'ANSWER': 'U.S.'}]
  # found 0 program(s)
# (t=28.30) i=14, candidate=[{'ANSWER': 'U.S.'}]
  # found 0 program(s)
# (t=33.57) i=15, candidate=[{'ANSWER': 'Brazil'}, {'ANSWER': 'Pakistan'}]
  # found 0 program(s)
# (t=34.59) i=16, candidate=[{'ANSWER': 'China'}, {'ANSWER': 'Pakistan'}]
  # found 0 program(s)
# (t=35.64) i=17, candidate=[{'ANSWER': 'Pakistan'}, {'ANSWER': 'Tunisia'}]
  # found 0 program(s)
# (t=36.65) i=18, candidate=[{'ANSWER': 'Brazil'}, {'ANSWER': 'Spain'}]
  # found 0 program(s)
# (t=37.65) i=19, candidate=[{'ANSWER': 'Brazil'}, {'ANSWER': 'Egypt'}]
  # found 0 program(s)
# (t=38.66) i=20, candidate=[{'ANSWER': 'Brazil'}, {'ANSWER': 'Czech Rep.'}]
  # found 0 program(s)
# (t=39.66) i=21, candidate=[{'ANSWER': 'Brazil'}, {'ANSWER': 'Turkey'}]
  # found 0 program(s)
# (t=40.69) i=22, candidate=[{'ANSWER': 'Brazil'}, {'ANSWER': 'France'}]
  # found 0 program(s)
# (t=41.72) i=23, candidate=[{'ANSWER': 'China'}, {'ANSWER': 'Spain'}]
  # found 0 program(s)
# (t=42.81) i=24, candidate=[{'ANSWER': 'China'}, {'ANSWER': 'Egypt'}]
  # found 0 program(s)
# (t=43.80) i=25, candidate=[{'ANSWER': 'China'}, {'ANSWER': 'Czech Rep.'}]
  # found 0 program(s)
# (t=45.07) i=26, candidate=[{'ANSWER': 'China'}, {'ANSWER': 'Turkey'}]
  # found 0 program(s)
# (t=46.08) i=27, candidate=[{'ANSWER': 'China'}, {'ANSWER': 'France'}]
  # found 0 program(s)
# (t=47.08) i=28, candidate=[{'ANSWER': 'Spain'}, {'ANSWER': 'Tunisia'}]
  # found 0 program(s)
# (t=48.13) i=29, candidate=[{'ANSWER': 'Egypt'}, {'ANSWER': 'Tunisia'}]
  # found 0 program(s)
# (t=49.17) i=30, candidate=[{'ANSWER': 41}]
  # found 0 program(s)
# (t=52.75) i=31, candidate=[{'ANSWER': 37}]
  # found 0 program(s)
# (t=57.22) i=32, candidate=[{'ANSWER': 34}]
  # found 0 program(s)
# (t=62.76) i=33, candidate=[{'ANSWER': 34}]
  # found 0 program(s)
# (t=67.12) i=34, candidate=[{'ANSWER': 33}]
  # found 0 program(s)
# (t=71.51) i=35, candidate=[{'ANSWER': 32}]
  # found 0 program(s)
# (t=75.89) i=36, candidate=[{'ANSWER': 28}]
  # found 0 program(s)
# (t=80.27) i=37, candidate=[{'ANSWER': 28}]
  # found 0 program(s)
# (t=84.63) i=38, candidate=[{'ANSWER': 28}]
  # found 0 program(s)
# (t=89.09) i=39, candidate=[{'ANSWER': 25}]
  # found 0 program(s)
# (t=93.32) i=40, candidate=[{'ANSWER': 48}]
  # found 0 program(s)
# (t=96.52) i=41, candidate=[{'ANSWER': 45}]
  # found 0 program(s)
# (t=100.88) i=42, candidate=[{'ANSWER': 41}]
  # found 0 program(s)
# (t=104.15) i=43, candidate=[{'ANSWER': 40}]
  # found 0 program(s)
# (t=108.52) i=44, candidate=[{'ANSWER': 38}]
  # found 0 program(s)
# (t=111.80) i=45, candidate=[{'ANSWER': 38}]
  # found 0 program(s)
# (t=115.07) i=46, candidate=[{'ANSWER': 38}]
  # found 0 program(s)
# (t=118.36) i=47, candidate=[{'ANSWER': 35}]
  # found 0 program(s)
# (t=122.87) i=48, candidate=[{'ANSWER': 34}]
  # found 0 program(s)
# (t=127.13) i=49, candidate=[{'ANSWER': 31}]
  # found 0 program(s)
# ====> fallback strategy (retrieval) is triggered because no explanation is found so far
# ====> retrieval_values: [10, 12, 13, 15, 16, 18, 2, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 40, 43, 44, 45, 47, 49, 5, 50, 51, 52, 60, 75, 81, 83, 84, 9, 'Brazil', 'Britain', 'China', 'Country', 'Czech Rep.', 'Egypt', 'France', 'Germany', 'Greece', 'Improve', 'India', 'Italy', 'Japan', 'Jordan', 'Lebanon', 'Mexico', 'Pakistan', 'Poland', 'Remain the same', 'Russia', 'Spain', 'Tunisia', 'Turkey', 'U.S.', 'Worsen', 'blue', 'color', 'opinion', 'orange', 'percentage', 'red']
# (t=131.40) fallback i=0, candidate=[{'ANSWER': 10}]
  # found 0 program(s)
# (t=135.66) fallback i=1, candidate=[{'ANSWER': 12}]
  # found 0 program(s)
# (t=139.89) fallback i=2, candidate=[{'ANSWER': 13}]
  # found 0 program(s)
# (t=144.18) fallback i=3, candidate=[{'ANSWER': 15}]
  # found 0 program(s)
# (t=148.78) fallback i=4, candidate=[{'ANSWER': 16}]
  # found 0 program(s)
# (t=153.03) fallback i=5, candidate=[{'ANSWER': 18}]
  # found 0 program(s)
# (t=157.34) fallback i=6, candidate=[{'ANSWER': 2}]
  # found 0 program(s)
# (t=161.75) fallback i=7, candidate=[{'ANSWER': 20}]
  # found 0 program(s)
# (t=166.11) fallback i=8, candidate=[{'ANSWER': 22}]
  # found 0 program(s)
# (t=170.71) fallback i=9, candidate=[{'ANSWER': 23}]
  # found 0 program(s)
# (t=175.13) fallback i=10, candidate=[{'ANSWER': 24}]
  # found 0 program(s)
# (t=179.47) fallback i=11, candidate=[{'ANSWER': 25}]
  # found 0 program(s)
# (t=183.82) fallback i=12, candidate=[{'ANSWER': 26}]
  # found 0 program(s)
# (t=188.16) fallback i=13, candidate=[{'ANSWER': 27}]
  # found 0 program(s)
# (t=192.53) fallback i=14, candidate=[{'ANSWER': 28}]
  # found 0 program(s)
# (t=196.91) fallback i=15, candidate=[{'ANSWER': 29}]
  # found 0 program(s)
# (t=201.23) fallback i=16, candidate=[{'ANSWER': 31}]
  # found 0 program(s)
# (t=205.56) fallback i=17, candidate=[{'ANSWER': 32}]
  # found 0 program(s)
# (t=209.80) fallback i=18, candidate=[{'ANSWER': 33}]
  # found 0 program(s)
# (t=214.07) fallback i=19, candidate=[{'ANSWER': 34}]
  # found 0 program(s)
# (t=218.40) fallback i=20, candidate=[{'ANSWER': 35}]
  # found 0 program(s)
# (t=222.71) fallback i=21, candidate=[{'ANSWER': 37}]
  # found 0 program(s)
# (t=227.05) fallback i=22, candidate=[{'ANSWER': 40}]
  # found 0 program(s)
# (t=231.33) fallback i=23, candidate=[{'ANSWER': 43}]
  # found 0 program(s)
# (t=235.58) fallback i=24, candidate=[{'ANSWER': 44}]
  # found 0 program(s)
# (t=239.86) fallback i=25, candidate=[{'ANSWER': 45}]
  # found 0 program(s)
# (t=244.51) fallback i=26, candidate=[{'ANSWER': 47}]
  # found 0 program(s)
# (t=248.90) fallback i=27, candidate=[{'ANSWER': 49}]
  # found 0 program(s)
# (t=253.36) fallback i=28, candidate=[{'ANSWER': 5}]
  # found 0 program(s)
# (t=257.76) fallback i=29, candidate=[{'ANSWER': 50}]
  # found 3 program(s)
    # SelectCol(SelectRow1(SelectRow1(@param0, >=, 2, 50@Int), ==, 2, 50@Int), ['2'])
      --> ['SelectCol', ['SelectRow1', ['SelectRow1', 'input@0', '>=', 'percentage', 50], '==', 'percentage', 50], ['percentage']]
    # SelectCol(SelectRow1(SelectRow1(@param0, ==, 1, Improve@Str), ==, 2, 50@Int), ['2'])
      --> ['SelectCol', ['SelectRow1', ['SelectRow1', 'input@0', '==', 'opinion', 'Improve'], '==', 'percentage', 50], ['percentage']]
    # SelectCol(SelectRow1(@param0, ==, 2, 50@Int), ['2'])
      --> ['SelectCol', ['SelectRow1', 'input@0', '==', 'percentage', 50], ['percentage']]
# (t=262.12) fallback i=30, candidate=[{'ANSWER': 51}]
  # found 0 program(s)
# (t=266.47) fallback i=31, candidate=[{'ANSWER': 52}]
  # found 0 program(s)
# (t=270.92) fallback i=32, candidate=[{'ANSWER': 60}]
  # found 0 program(s)
# (t=275.28) fallback i=33, candidate=[{'ANSWER': 75}]
  # found 0 program(s)
# (t=279.65) fallback i=34, candidate=[{'ANSWER': 81}]
  # found 0 program(s)
# (t=284.05) fallback i=35, candidate=[{'ANSWER': 83}]
  # found 0 program(s)
# (t=288.41) fallback i=36, candidate=[{'ANSWER': 84}]
  # found 0 program(s)
# (t=292.81) fallback i=37, candidate=[{'ANSWER': 9}]
  # found 0 program(s)
# (t=297.25) fallback i=38, candidate=[{'ANSWER': 'Brazil'}]
---------- timeout ----------

# ========== review report ========== #
# top-1, score: 2.23, answer: [50]
  # tprog: SelectCol(SelectRow1(SelectRow1(@param0, ==, 1, Improve@Str), ==, 2, 50@Int), ['2'])
# top-2, score: 1.23, answer: [50]
  # tprog: SelectCol(SelectRow1(SelectRow1(@param0, >=, 2, 50@Int), ==, 2, 50@Int), ['2'])
# top-3, score: 1.21, answer: [50]
  # tprog: SelectCol(SelectRow1(@param0, ==, 2, 50@Int), ['2'])
