# parsed arguments: Namespace(benchmark='Qc8d06', dsl='meta_visqa', skeletons='visqa_normal', strategy='TaPas_C', fallback='auto', timeout=300, mode='full', expected_only=False)
# loading benchmark...
# table keywords: {'828531', 'luton', 'blue', '173576', 'southampton', 'passengers', 'belfast', 'birmingham', 'stansted', 'color', 'city', '100003', 'gatwick', 'london', 'international', '208123', '276488', '158239', 'handled', 'heathrow', '607417', '239666', 'airport', '266987', '331607', 'bristol'}
# input type: [dtype('O'), dtype('int64'), dtype('O')]
# input is:
                 Airport  Passengers handled color
0        London Heathrow              828531  blue
1         London Gatwick              607417  blue
2        London Stansted              331607  blue
3           London Luton              276488  blue
4  Belfast International              266987  blue
5                Bristol              239666  blue
6             Birmingham              208123  blue
7            Southampton              173576  blue
8            London City              158239  blue
9           Belfast City              100003  blue
# query is: What is on the y-axis?
# expected output type:[dtype('O')]
# expected output is:
               ANSWER
0  Passengers handled
# inferred DSL terminals:
  # ConstVal: ['<NULL>']
     # cmap: []
  # AggrFunc: ['<NULL>']
     # amap: []
  # NumFunc: ['<NULL>']
     # nmap: []
  # BoolFunc: ['==', '<NULL>']
     # bmap: [(None, '==')]
  # IndFunc: ['<NULL>']
     # imap: []
# loading skeleton list...

# ========== candidate program report ========== #
# (t=0.00) i=0, candidate=[{'ANSWER': 'Belfast International'}]
  # found 0 program(s)
# (t=0.12) i=1, candidate=[{'ANSWER': 'Belfast International'}, {'ANSWER': 'Birmingham'}]
  # found 0 program(s)
# (t=0.21) i=2, candidate=[{'ANSWER': 'Belfast International'}, {'ANSWER': 'London Heathrow'}]
  # found 0 program(s)
# (t=0.30) i=3, candidate=[{'ANSWER': 'Belfast International'}, {'ANSWER': 'Bristol'}]
  # found 0 program(s)
# (t=0.38) i=4, candidate=[{'ANSWER': 'Belfast International'}, {'ANSWER': 'London Gatwick'}]
  # found 0 program(s)
# (t=0.47) i=5, candidate=[{'ANSWER': 'Belfast City'}, {'ANSWER': 'Belfast International'}]
  # found 0 program(s)
# (t=0.55) i=6, candidate=[{'ANSWER': 'Belfast International'}, {'ANSWER': 'London Luton'}]
  # found 0 program(s)
# (t=0.64) i=7, candidate=[{'ANSWER': 'Belfast International'}, {'ANSWER': 'Southampton'}]
  # found 0 program(s)
# (t=0.72) i=8, candidate=[{'ANSWER': 'Belfast International'}, {'ANSWER': 'London Stansted'}]
  # found 0 program(s)
# (t=0.81) i=9, candidate=[{'ANSWER': 'Belfast International'}, {'ANSWER': 'London City'}]
  # found 0 program(s)
# (t=0.89) i=10, candidate=[{'ANSWER': 'Birmingham'}]
  # found 0 program(s)
# (t=1.01) i=11, candidate=[{'ANSWER': 'Birmingham'}, {'ANSWER': 'London Heathrow'}]
  # found 0 program(s)
# (t=1.10) i=12, candidate=[{'ANSWER': 'Birmingham'}, {'ANSWER': 'Bristol'}]
  # found 0 program(s)
# (t=1.19) i=13, candidate=[{'ANSWER': 'Birmingham'}, {'ANSWER': 'London Gatwick'}]
  # found 0 program(s)
# (t=1.27) i=14, candidate=[{'ANSWER': 'Belfast City'}, {'ANSWER': 'Birmingham'}]
  # found 0 program(s)
# (t=1.36) i=15, candidate=[{'ANSWER': 'Birmingham'}, {'ANSWER': 'London Luton'}]
  # found 0 program(s)
# (t=1.45) i=16, candidate=[{'ANSWER': 'Birmingham'}, {'ANSWER': 'Southampton'}]
  # found 0 program(s)
# (t=1.54) i=17, candidate=[{'ANSWER': 'Birmingham'}, {'ANSWER': 'London Stansted'}]
  # found 0 program(s)
# (t=1.62) i=18, candidate=[{'ANSWER': 'Birmingham'}, {'ANSWER': 'London City'}]
  # found 0 program(s)
# (t=1.71) i=19, candidate=[{'ANSWER': 'London Heathrow'}]
  # found 0 program(s)
# (t=1.83) i=20, candidate=[{'ANSWER': 'Bristol'}, {'ANSWER': 'London Heathrow'}]
  # found 0 program(s)
# (t=1.92) i=21, candidate=[{'ANSWER': 'London Gatwick'}, {'ANSWER': 'London Heathrow'}]
  # found 0 program(s)
# (t=2.00) i=22, candidate=[{'ANSWER': 'Belfast City'}, {'ANSWER': 'London Heathrow'}]
  # found 0 program(s)
# (t=2.09) i=23, candidate=[{'ANSWER': 'London Heathrow'}, {'ANSWER': 'London Luton'}]
  # found 0 program(s)
# (t=2.17) i=24, candidate=[{'ANSWER': 'London Heathrow'}, {'ANSWER': 'Southampton'}]
  # found 0 program(s)
# (t=2.26) i=25, candidate=[{'ANSWER': 'London Heathrow'}, {'ANSWER': 'London Stansted'}]
  # found 0 program(s)
# (t=2.35) i=26, candidate=[{'ANSWER': 'London City'}, {'ANSWER': 'London Heathrow'}]
  # found 0 program(s)
# (t=2.43) i=27, candidate=[{'ANSWER': 'Bristol'}]
  # found 0 program(s)
# (t=2.56) i=28, candidate=[{'ANSWER': 'Bristol'}, {'ANSWER': 'London Gatwick'}]
  # found 0 program(s)
# (t=2.64) i=29, candidate=[{'ANSWER': 'Belfast City'}, {'ANSWER': 'Bristol'}]
  # found 0 program(s)
# ====> fallback strategy (retrieval) is triggered because no explanation is found so far
# ====> retrieval_values: [100003, 158239, 173576, 208123, 239666, 266987, 276488, 331607, 607417, 828531, 'Airport', 'Belfast City', 'Belfast International', 'Birmingham', 'Bristol', 'London City', 'London Gatwick', 'London Heathrow', 'London Luton', 'London Stansted', 'Passengers handled', 'Southampton', 'blue', 'color']
# (t=2.73) fallback i=0, candidate=[{'ANSWER': 100003}]
  # found 0 program(s)
# (t=2.85) fallback i=1, candidate=[{'ANSWER': 158239}]
  # found 0 program(s)
# (t=2.97) fallback i=2, candidate=[{'ANSWER': 173576}]
  # found 0 program(s)
# (t=3.10) fallback i=3, candidate=[{'ANSWER': 208123}]
  # found 0 program(s)
# (t=3.22) fallback i=4, candidate=[{'ANSWER': 239666}]
  # found 0 program(s)
# (t=3.34) fallback i=5, candidate=[{'ANSWER': 266987}]
  # found 0 program(s)
# (t=3.46) fallback i=6, candidate=[{'ANSWER': 276488}]
  # found 0 program(s)
# (t=3.58) fallback i=7, candidate=[{'ANSWER': 331607}]
  # found 0 program(s)
# (t=3.70) fallback i=8, candidate=[{'ANSWER': 607417}]
  # found 0 program(s)
# (t=3.82) fallback i=9, candidate=[{'ANSWER': 828531}]
  # found 0 program(s)
# (t=3.94) fallback i=10, candidate=[{'ANSWER': 'Airport'}]
  # found 0 program(s)
# (t=4.01) fallback i=11, candidate=[{'ANSWER': 'Belfast City'}]
  # found 0 program(s)
# (t=4.13) fallback i=12, candidate=[{'ANSWER': 'Belfast International'}]
  # found 0 program(s)
# (t=4.25) fallback i=13, candidate=[{'ANSWER': 'Birmingham'}]
  # found 0 program(s)
# (t=4.37) fallback i=14, candidate=[{'ANSWER': 'Bristol'}]
  # found 0 program(s)
# (t=4.49) fallback i=15, candidate=[{'ANSWER': 'London City'}]
  # found 0 program(s)
# (t=4.62) fallback i=16, candidate=[{'ANSWER': 'London Gatwick'}]
  # found 0 program(s)
# (t=4.74) fallback i=17, candidate=[{'ANSWER': 'London Heathrow'}]
  # found 0 program(s)
# (t=4.86) fallback i=18, candidate=[{'ANSWER': 'London Luton'}]
  # found 0 program(s)
# (t=4.98) fallback i=19, candidate=[{'ANSWER': 'London Stansted'}]
  # found 0 program(s)
# (t=5.10) fallback i=20, candidate=[{'ANSWER': 'Passengers handled'}]
  # found 0 program(s)
# (t=5.18) fallback i=21, candidate=[{'ANSWER': 'Southampton'}]
  # found 0 program(s)
# (t=5.30) fallback i=22, candidate=[{'ANSWER': 'blue'}]
  # found 0 program(s)
# (t=5.43) fallback i=23, candidate=[{'ANSWER': 'color'}]
  # found 0 program(s)
# ====> fallback strategy (original) is triggered
# ====> use the original TaPas output as answer, which is: ['<no answer>']

# ========== review report ========== #
